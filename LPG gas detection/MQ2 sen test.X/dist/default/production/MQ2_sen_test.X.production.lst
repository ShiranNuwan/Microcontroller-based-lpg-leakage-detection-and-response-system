

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue May 03 11:48:13 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 2.32
    40                           ; Generated 02/02/2021 GMT
    41                           ; 
    42                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC16F877A Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     	;# 
    75  0001                     	;# 
    76  0002                     	;# 
    77  0003                     	;# 
    78  0004                     	;# 
    79  0005                     	;# 
    80  0006                     	;# 
    81  0007                     	;# 
    82  0008                     	;# 
    83  0009                     	;# 
    84  000A                     	;# 
    85  000B                     	;# 
    86  000C                     	;# 
    87  000D                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0014                     	;# 
    96  0015                     	;# 
    97  0015                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001B                     	;# 
   105  001C                     	;# 
   106  001D                     	;# 
   107  001E                     	;# 
   108  001F                     	;# 
   109  0081                     	;# 
   110  0085                     	;# 
   111  0086                     	;# 
   112  0087                     	;# 
   113  0088                     	;# 
   114  0089                     	;# 
   115  008C                     	;# 
   116  008D                     	;# 
   117  008E                     	;# 
   118  0091                     	;# 
   119  0092                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009C                     	;# 
   125  009D                     	;# 
   126  009E                     	;# 
   127  009F                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  018C                     	;# 
   133  018D                     	;# 
   134  0000                     	;# 
   135  0001                     	;# 
   136  0002                     	;# 
   137  0003                     	;# 
   138  0004                     	;# 
   139  0005                     	;# 
   140  0006                     	;# 
   141  0007                     	;# 
   142  0008                     	;# 
   143  0009                     	;# 
   144  000A                     	;# 
   145  000B                     	;# 
   146  000C                     	;# 
   147  000D                     	;# 
   148  000E                     	;# 
   149  000E                     	;# 
   150  000F                     	;# 
   151  0010                     	;# 
   152  0011                     	;# 
   153  0012                     	;# 
   154  0013                     	;# 
   155  0014                     	;# 
   156  0015                     	;# 
   157  0015                     	;# 
   158  0016                     	;# 
   159  0017                     	;# 
   160  0018                     	;# 
   161  0019                     	;# 
   162  001A                     	;# 
   163  001B                     	;# 
   164  001B                     	;# 
   165  001C                     	;# 
   166  001D                     	;# 
   167  001E                     	;# 
   168  001F                     	;# 
   169  0081                     	;# 
   170  0085                     	;# 
   171  0086                     	;# 
   172  0087                     	;# 
   173  0088                     	;# 
   174  0089                     	;# 
   175  008C                     	;# 
   176  008D                     	;# 
   177  008E                     	;# 
   178  0091                     	;# 
   179  0092                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0098                     	;# 
   183  0099                     	;# 
   184  009C                     	;# 
   185  009D                     	;# 
   186  009E                     	;# 
   187  009F                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  010F                     	;# 
   192  018C                     	;# 
   193  018D                     	;# 
   194                           
   195                           	psect	idataBANK0
   196  02D0                     __pidataBANK0:
   197                           
   198                           ;initializer for _f_sms
   199  02D0  3401               	retlw	1
   200  02D1  3400               	retlw	0
   201                           
   202                           ;initializer for _mq2_thresh
   203  02D2  342C               	retlw	44
   204  02D3  3401               	retlw	1
   205                           
   206                           	psect	strings
   207  0300                     __pstrings:
   208  0300                     stringtab:
   209  0300                     __stringtab:
   210                           
   211                           ;	String table - string pointers are 1 byte each
   212  0300  1BFF               	btfsc	btemp+1,7
   213  0301  2B0A               	ljmp	stringcode
   214  0302  1383               	bcf	3,7
   215  0303  187F               	btfsc	btemp+1,0
   216  0304  1783               	bsf	3,7
   217  0305  0800               	movf	0,w
   218  0306  0A84               	incf	4,f
   219  0307  1903               	skipnz
   220  0308  0AFF               	incf	btemp+1,f
   221  0309  0008               	return
   222  030A                     stringcode:
   223  030A                     stringdir:
   224  030A  3003               	movlw	high stringdir
   225  030B  008A               	movwf	10
   226  030C  0804               	movf	4,w
   227  030D  0A84               	incf	4,f
   228  030E  0782               	addwf	2,f
   229  030F                     __stringbase:
   230  030F  3400               	retlw	0
   231  0310                     __end_of__stringtab:
   232  0310                     _dpowers:
   233  0310  3401               	retlw	1
   234  0311  3400               	retlw	0
   235  0312  340A               	retlw	10
   236  0313  3400               	retlw	0
   237  0314  3464               	retlw	100
   238  0315  3400               	retlw	0
   239  0316  34E8               	retlw	232
   240  0317  3403               	retlw	3
   241  0318  3410               	retlw	16
   242  0319  3427               	retlw	39
   243  031A                     __end_of_dpowers:
   244  031A                     _del_interval:
   245  031A  34E8               	retlw	232
   246  031B  3403               	retlw	3
   247  031C  3400               	retlw	0
   248  031D  3400               	retlw	0
   249  031E                     __end_of_del_interval:
   250  031E                     _sms_interval:
   251  031E  3410               	retlw	16
   252  031F  3427               	retlw	39
   253  0320  3400               	retlw	0
   254  0321  3400               	retlw	0
   255  0322                     __end_of_sms_interval:
   256  0322                     _buzzer_interval:
   257  0322  34F4               	retlw	244
   258  0323  3401               	retlw	1
   259  0324  3400               	retlw	0
   260  0325  3400               	retlw	0
   261  0326                     __end_of_buzzer_interval:
   262  0326                     _blink_interval:
   263  0326  34F4               	retlw	244
   264  0327  3401               	retlw	1
   265  0328  3400               	retlw	0
   266  0329  3400               	retlw	0
   267  032A                     __end_of_blink_interval:
   268  0008                     _PORTD	set	8
   269  0006                     _PORTB	set	6
   270  001E                     _ADRESH	set	30
   271  001F                     _ADCON0	set	31
   272  0001                     _TMR0	set	1
   273  0019                     _TXREG	set	25
   274  001A                     _RCREG	set	26
   275  0044                     _RD4	set	68
   276  0043                     _RD3	set	67
   277  0042                     _RD2	set	66
   278  0041                     _RD1	set	65
   279  0040                     _RD0	set	64
   280  00FA                     _GO_nDONE	set	250
   281  005A                     _TMR0IF	set	90
   282  005D                     _TMR0IE	set	93
   283  005E                     _PEIE	set	94
   284  005F                     _GIE	set	95
   285  0064                     _TXIF	set	100
   286  0065                     _RCIF	set	101
   287  00C1                     _OERR	set	193
   288  00C4                     _CREN	set	196
   289  00C6                     _RX9	set	198
   290  00C7                     _SPEN	set	199
   291  0034                     _RB4	set	52
   292  0035                     _RB5	set	53
   293  0030                     _RB0	set	48
   294  0031                     _RB1	set	49
   295  0032                     _RB2	set	50
   296  0033                     _RB3	set	51
   297  0088                     _TRISD	set	136
   298  0086                     _TRISB	set	134
   299  009E                     _ADRESL	set	158
   300  009F                     _ADCON1	set	159
   301  0081                     _OPTION_REG	set	129
   302  0099                     _SPBRG	set	153
   303  04C2                     _BRGH	set	1218
   304  04C4                     _SYNC	set	1220
   305  04C5                     _TXEN	set	1221
   306  04C6                     _TX9	set	1222
   307  043F                     _TRISC7	set	1087
   308  043E                     _TRISC6	set	1086
   309  032A                     STR_10:
   310  032A  340A               	retlw	10
   311  032B  340D               	retlw	13
   312  032C  3441               	retlw	65	;'A'
   313  032D  3454               	retlw	84	;'T'
   314  032E  342B               	retlw	43	;'+'
   315  032F  3443               	retlw	67	;'C'
   316  0330  344D               	retlw	77	;'M'
   317  0331  3447               	retlw	71	;'G'
   318  0332  3453               	retlw	83	;'S'
   319  0333  343D               	retlw	61	;'='
   320  0334  3422               	retlw	34	;'"'
   321  0335  342B               	retlw	43	;'+'
   322  0336  3439               	retlw	57	;'9'
   323  0337  3434               	retlw	52	;'4'
   324  0338  3437               	retlw	55	;'7'
   325  0339  3437               	retlw	55	;'7'
   326  033A  3431               	retlw	49	;'1'
   327  033B  3436               	retlw	54	;'6'
   328  033C  3433               	retlw	51	;'3'
   329  033D  3432               	retlw	50	;'2'
   330  033E  3433               	retlw	51	;'3'
   331  033F  3436               	retlw	54	;'6'
   332  0340  3437               	retlw	55	;'7'
   333  0341  3422               	retlw	34	;'"'
   334  0342  340A               	retlw	10
   335  0343  340D               	retlw	13
   336  0344  3400               	retlw	0
   337  0345                     STR_11:
   338  0345  340A               	retlw	10
   339  0346  340D               	retlw	13
   340  0347  3447               	retlw	71	;'G'
   341  0348  3461               	retlw	97	;'a'
   342  0349  3473               	retlw	115	;'s'
   343  034A  3420               	retlw	32	;' '
   344  034B  344C               	retlw	76	;'L'
   345  034C  3465               	retlw	101	;'e'
   346  034D  3461               	retlw	97	;'a'
   347  034E  346B               	retlw	107	;'k'
   348  034F  3420               	retlw	32	;' '
   349  0350  3444               	retlw	68	;'D'
   350  0351  3465               	retlw	101	;'e'
   351  0352  3474               	retlw	116	;'t'
   352  0353  3465               	retlw	101	;'e'
   353  0354  3463               	retlw	99	;'c'
   354  0355  3474               	retlw	116	;'t'
   355  0356  3465               	retlw	101	;'e'
   356  0357  3464               	retlw	100	;'d'
   357  0358  340A               	retlw	10
   358  0359  340D               	retlw	13
   359  035A  3420               	retlw	32	;' '
   360  035B  3400               	retlw	0
   361  035C                     STR_13:
   362  035C  344C               	retlw	76	;'L'
   363  035D  3450               	retlw	80	;'P'
   364  035E  3447               	retlw	71	;'G'
   365  035F  3420               	retlw	32	;' '
   366  0360  3447               	retlw	71	;'G'
   367  0361  3461               	retlw	97	;'a'
   368  0362  3473               	retlw	115	;'s'
   369  0363  3420               	retlw	32	;' '
   370  0364  3444               	retlw	68	;'D'
   371  0365  3465               	retlw	101	;'e'
   372  0366  3474               	retlw	116	;'t'
   373  0367  3465               	retlw	101	;'e'
   374  0368  3463               	retlw	99	;'c'
   375  0369  3474               	retlw	116	;'t'
   376  036A  346F               	retlw	111	;'o'
   377  036B  3472               	retlw	114	;'r'
   378  036C  3400               	retlw	0
   379  036D                     STR_9:
   380  036D  340A               	retlw	10
   381  036E  340D               	retlw	13
   382  036F  3441               	retlw	65	;'A'
   383  0370  3454               	retlw	84	;'T'
   384  0371  342B               	retlw	43	;'+'
   385  0372  3443               	retlw	67	;'C'
   386  0373  344D               	retlw	77	;'M'
   387  0374  3447               	retlw	71	;'G'
   388  0375  3446               	retlw	70	;'F'
   389  0376  343D               	retlw	61	;'='
   390  0377  3431               	retlw	49	;'1'
   391  0378  340A               	retlw	10
   392  0379  340D               	retlw	13
   393  037A  3420               	retlw	32	;' '
   394  037B  3400               	retlw	0
   395  037C                     STR_1:
   396  037C  3449               	retlw	73	;'I'
   397  037D  346E               	retlw	110	;'n'
   398  037E  3469               	retlw	105	;'i'
   399  037F  3474               	retlw	116	;'t'
   400  0380  3469               	retlw	105	;'i'
   401  0381  3461               	retlw	97	;'a'
   402  0382  346C               	retlw	108	;'l'
   403  0383  3469               	retlw	105	;'i'
   404  0384  347A               	retlw	122	;'z'
   405  0385  3469               	retlw	105	;'i'
   406  0386  346E               	retlw	110	;'n'
   407  0387  3467               	retlw	103	;'g'
   408  0388  3400               	retlw	0
   409  0389                     STR_4:
   410  0389  344D               	retlw	77	;'M'
   411  038A  3451               	retlw	81	;'Q'
   412  038B  3420               	retlw	32	;' '
   413  038C  3432               	retlw	50	;'2'
   414  038D  3420               	retlw	32	;' '
   415  038E  343D               	retlw	61	;'='
   416  038F  3420               	retlw	32	;' '
   417  0390  3425               	retlw	37	;'%'
   418  0391  3464               	retlw	100	;'d'
   419  0392  3420               	retlw	32	;' '
   420  0393  3420               	retlw	32	;' '
   421  0394  3400               	retlw	0
   422  0395                     STR_6:
   423  0395  344E               	retlw	78	;'N'
   424  0396  346F               	retlw	111	;'o'
   425  0397  3472               	retlw	114	;'r'
   426  0398  346D               	retlw	109	;'m'
   427  0399  3461               	retlw	97	;'a'
   428  039A  346C               	retlw	108	;'l'
   429  039B  3420               	retlw	32	;' '
   430  039C  3420               	retlw	32	;' '
   431  039D  3420               	retlw	32	;' '
   432  039E  3420               	retlw	32	;' '
   433  039F  3400               	retlw	0
   434  03A0                     STR_5:
   435  03A0  3457               	retlw	87	;'W'
   436  03A1  3461               	retlw	97	;'a'
   437  03A2  3472               	retlw	114	;'r'
   438  03A3  346E               	retlw	110	;'n'
   439  03A4  3469               	retlw	105	;'i'
   440  03A5  346E               	retlw	110	;'n'
   441  03A6  3467               	retlw	103	;'g'
   442  03A7  3420               	retlw	32	;' '
   443  03A8  3420               	retlw	32	;' '
   444  03A9  3420               	retlw	32	;' '
   445  03AA  3400               	retlw	0
   446  03AB                     STR_14:
   447  03AB  3456               	retlw	86	;'V'
   448  03AC  3465               	retlw	101	;'e'
   449  03AD  3472               	retlw	114	;'r'
   450  03AE  342D               	retlw	45	;'-'
   451  03AF  3430               	retlw	48	;'0'
   452  03B0  342E               	retlw	46	;'.'
   453  03B1  3431               	retlw	49	;'1'
   454  03B2  3400               	retlw	0
   455  03B3                     STR_8:
   456  03B3  340A               	retlw	10
   457  03B4  340D               	retlw	13
   458  03B5  3441               	retlw	65	;'A'
   459  03B6  3454               	retlw	84	;'T'
   460  03B7  340A               	retlw	10
   461  03B8  340D               	retlw	13
   462  03B9  3400               	retlw	0
   463  03BA                     STR_3:
   464  03BA  3444               	retlw	68	;'D'
   465  03BB  346F               	retlw	111	;'o'
   466  03BC  346E               	retlw	110	;'n'
   467  03BD  3465               	retlw	101	;'e'
   468  03BE  3420               	retlw	32	;' '
   469  03BF  3421               	retlw	33	;'!'
   470  03C0  3400               	retlw	0
   471  0342                     
   472                           	psect	cinit
   473  000F                     start_initialization:	
   474                           ; #config settings
   475                           
   476  000F                     __initialization:
   477                           
   478                           ; Initialize objects allocated to BANK0
   479  000F  120A  118A  22D0  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   480  0014  00E8               	movwf	__pdataBANK0& (0+127)
   481  0015  120A  118A  22D1  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   482  001A  00E9               	movwf	(__pdataBANK0+1)& (0+127)
   483  001B  120A  118A  22D2  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   484  0020  00EA               	movwf	(__pdataBANK0+2)& (0+127)
   485  0021  120A  118A  22D3  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   486  0026  00EB               	movwf	(__pdataBANK0+3)& (0+127)
   487                           
   488                           ; Clear objects allocated to BANK0
   489  0027  1383               	bcf	3,7	;select IRP bank0
   490  0028  3020               	movlw	low __pbssBANK0
   491  0029  0084               	movwf	4
   492  002A  3050               	movlw	low (__pbssBANK0+48)
   493  002B  120A  118A  22C8  120A  118A  	fcall	clear_ram0
   494  0030                     end_of_initialization:	
   495                           ;End of C runtime variable initialization code
   496                           
   497  0030                     __end_of__initialization:
   498  0030  0183               	clrf	3
   499  0031  120A  118A  2BC1   	ljmp	_main	;jump to C main() function
   500                           
   501                           	psect	bssBANK0
   502  0020                     __pbssBANK0:
   503  0020                     _del_previousMillis:
   504  0020                     	ds	4
   505  0024                     _sms_previousMillis:
   506  0024                     	ds	4
   507  0028                     _buzzer_previousMillis:
   508  0028                     	ds	4
   509  002C                     _blink_previousMillis:
   510  002C                     	ds	4
   511  0030                     _currentMillis:
   512  0030                     	ds	4
   513  0034                     _del_c:
   514  0034                     	ds	2
   515  0036                     _sms_state:
   516  0036                     	ds	2
   517  0038                     _buzzer_state:
   518  0038                     	ds	2
   519  003A                     _analog_read:
   520  003A                     	ds	2
   521  003C                     _array:
   522  003C                     	ds	20
   523                           
   524                           	psect	dataBANK0
   525  0068                     __pdataBANK0:
   526  0068                     _f_sms:
   527  0068                     	ds	2
   528  006A                     _mq2_thresh:
   529  006A                     	ds	2
   530                           
   531                           	psect	clrtext
   532  02C8                     clear_ram0:	
   533                           ;	Called with FSR containing the base address, and
   534                           ;	W with the last address+1
   535                           
   536  02C8  0064               	clrwdt	;clear the watchdog before getting into this loop
   537  02C9                     clrloop0:
   538  02C9  0180               	clrf	0	;clear RAM location pointed to by FSR
   539  02CA  0A84               	incf	4,f	;increment pointer
   540  02CB  0604               	xorwf	4,w	;XOR with final address
   541  02CC  1903               	btfsc	3,2	;have we reached the end yet?
   542  02CD  3400               	retlw	0	;all done for this memory range, return
   543  02CE  0604               	xorwf	4,w	;XOR again to restore value
   544  02CF  2AC9               	goto	clrloop0	;do the next byte
   545                           
   546                           	psect	cstackCOMMON
   547  0070                     __pcstackCOMMON:
   548  0070                     ?_Lcd_SetBit:
   549  0070                     ?_Lcd_Cmd:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_Lcd_Start:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_Lcd_Print_Char:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_Initialize_UART:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ?_UART_send_char:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_UART_send_string:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ?_Init_timer:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_timer_isr:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ??_timer_isr:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_ADC_Initialize:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_blink:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_initializer:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_operate_buzzer:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_read_sensor:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ?_send_sms:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_Lcd_Clear:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_main:	
   598                           ; 2 bytes @ 0x0
   599                           
   600                           
   601                           ; 2 bytes @ 0x0
   602  0070                     	ds	2
   603  0072                     ??_Lcd_SetBit:
   604  0072                     ??_Initialize_UART:	
   605                           ; 1 bytes @ 0x2
   606                           
   607  0072                     ??_UART_send_char:	
   608                           ; 1 bytes @ 0x2
   609                           
   610  0072                     ??_Init_timer:	
   611                           ; 1 bytes @ 0x2
   612                           
   613  0072                     ??_ADC_Initialize:	
   614                           ; 1 bytes @ 0x2
   615                           
   616  0072                     ??_blink:	
   617                           ; 1 bytes @ 0x2
   618                           
   619  0072                     ??_operate_buzzer:	
   620                           ; 1 bytes @ 0x2
   621                           
   622  0072                     ?_ADC_Read:	
   623                           ; 1 bytes @ 0x2
   624                           
   625  0072                     ?___lwdiv:	
   626                           ; 2 bytes @ 0x2
   627                           
   628  0072                     Lcd_SetBit@data_bit:	
   629                           ; 2 bytes @ 0x2
   630                           
   631  0072                     UART_send_char@bt:	
   632                           ; 1 bytes @ 0x2
   633                           
   634  0072                     ___lwdiv@divisor:	
   635                           ; 1 bytes @ 0x2
   636                           
   637                           
   638                           ; 2 bytes @ 0x2
   639  0072                     	ds	1
   640  0073                     ??_Lcd_Cmd:
   641  0073                     ??_Lcd_Print_Char:	
   642                           ; 1 bytes @ 0x3
   643                           
   644  0073                     ??_UART_send_string:	
   645                           ; 1 bytes @ 0x3
   646                           
   647                           
   648                           ; 1 bytes @ 0x3
   649  0073                     	ds	1
   650  0074                     ??_ADC_Read:
   651  0074                     Lcd_Print_Char@Lower_Nibble:	
   652                           ; 1 bytes @ 0x4
   653                           
   654  0074                     UART_send_string@st_pt:	
   655                           ; 1 bytes @ 0x4
   656                           
   657  0074                     ___lwdiv@dividend:	
   658                           ; 1 bytes @ 0x4
   659                           
   660                           
   661                           ; 2 bytes @ 0x4
   662  0074                     	ds	1
   663  0075                     ??_send_sms:
   664  0075                     Lcd_Cmd@a:	
   665                           ; 1 bytes @ 0x5
   666                           
   667  0075                     Lcd_Print_Char@Upper_Nibble:	
   668                           ; 1 bytes @ 0x5
   669                           
   670                           
   671                           ; 1 bytes @ 0x5
   672  0075                     	ds	1
   673  0076                     ??_Lcd_Clear:
   674  0076                     ?_Lcd_Set_Cursor:	
   675                           ; 1 bytes @ 0x6
   676                           
   677  0076                     ??_Lcd_Start:	
   678                           ; 1 bytes @ 0x6
   679                           
   680  0076                     ??___lwdiv:	
   681                           ; 1 bytes @ 0x6
   682                           
   683  0076                     Lcd_Set_Cursor@b:	
   684                           ; 1 bytes @ 0x6
   685                           
   686  0076                     Lcd_Print_Char@data:	
   687                           ; 1 bytes @ 0x6
   688                           
   689  0076                     ADC_Read@channel:	
   690                           ; 1 bytes @ 0x6
   691                           
   692                           
   693                           ; 1 bytes @ 0x6
   694  0076                     	ds	1
   695  0077                     ??_Lcd_Set_Cursor:
   696  0077                     Lcd_Print_Char@i:	
   697                           ; 1 bytes @ 0x7
   698                           
   699  0077                     ___lwdiv@quotient:	
   700                           ; 2 bytes @ 0x7
   701                           
   702                           
   703                           ; 2 bytes @ 0x7
   704  0077                     	ds	2
   705  0079                     ___lwdiv@counter:
   706  0079                     Lcd_Print_Char@i_99:	
   707                           ; 1 bytes @ 0x9
   708                           
   709                           
   710                           ; 2 bytes @ 0x9
   711  0079                     	ds	1
   712  007A                     ??___lwmod:
   713                           
   714                           ; 1 bytes @ 0xA
   715  007A                     	ds	1
   716  007B                     ___lwmod@counter:
   717                           
   718                           ; 1 bytes @ 0xB
   719  007B                     	ds	1
   720                           
   721                           	psect	cstackBANK0
   722  0050                     __pcstackBANK0:
   723  0050                     ?_Lcd_Print_String:
   724  0050                     ?___lwmod:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0050                     Lcd_Set_Cursor@a:	
   728                           ; 2 bytes @ 0x0
   729                           
   730  0050                     Lcd_Print_String@a:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0050                     ___lwmod@divisor:	
   734                           ; 2 bytes @ 0x0
   735                           
   736                           
   737                           ; 2 bytes @ 0x0
   738  0050                     	ds	1
   739  0051                     Lcd_Set_Cursor@z:
   740                           
   741                           ; 1 bytes @ 0x1
   742  0051                     	ds	1
   743  0052                     ??_Lcd_Print_String:
   744  0052                     Lcd_Set_Cursor@y:	
   745                           ; 1 bytes @ 0x2
   746                           
   747  0052                     ___lwmod@dividend:	
   748                           ; 1 bytes @ 0x2
   749                           
   750                           
   751                           ; 2 bytes @ 0x2
   752  0052                     	ds	1
   753  0053                     Lcd_Set_Cursor@temp:
   754                           
   755                           ; 1 bytes @ 0x3
   756  0053                     	ds	1
   757  0054                     ?_sprintf:
   758  0054                     sprintf@f:	
   759                           ; 2 bytes @ 0x4
   760                           
   761                           
   762                           ; 1 bytes @ 0x4
   763  0054                     	ds	1
   764  0055                     Lcd_Print_String@i:
   765                           
   766                           ; 2 bytes @ 0x5
   767  0055                     	ds	2
   768  0057                     ??_sprintf:
   769  0057                     ??_initializer:	
   770                           ; 1 bytes @ 0x7
   771                           
   772                           
   773                           ; 1 bytes @ 0x7
   774  0057                     	ds	3
   775  005A                     sprintf@ap:
   776  005A                     initializer@i:	
   777                           ; 1 bytes @ 0xA
   778                           
   779                           
   780                           ; 2 bytes @ 0xA
   781  005A                     	ds	1
   782  005B                     sprintf@flag:
   783                           
   784                           ; 1 bytes @ 0xB
   785  005B                     	ds	1
   786  005C                     sprintf@prec:
   787                           
   788                           ; 1 bytes @ 0xC
   789  005C                     	ds	1
   790  005D                     sprintf@val:
   791                           
   792                           ; 2 bytes @ 0xD
   793  005D                     	ds	2
   794  005F                     sprintf@sp:
   795                           
   796                           ; 1 bytes @ 0xF
   797  005F                     	ds	1
   798  0060                     sprintf@c:
   799                           
   800                           ; 1 bytes @ 0x10
   801  0060                     	ds	1
   802  0061                     ??_read_sensor:
   803                           
   804                           ; 1 bytes @ 0x11
   805  0061                     	ds	4
   806  0065                     ??_main:
   807                           
   808                           ; 1 bytes @ 0x15
   809  0065                     	ds	3
   810                           
   811                           	psect	maintext
   812  03C1                     __pmaintext:	
   813 ;;
   814 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   815 ;;
   816 ;; *************** function _main *****************
   817 ;; Defined at:
   818 ;;		line 213 in file "MQ2 test.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;		None
   821 ;; Auto vars:     Size  Location     Type
   822 ;;		None
   823 ;; Return value:  Size  Location     Type
   824 ;;                  2  237[None  ] int 
   825 ;; Registers used:
   826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   827 ;; Tracked objects:
   828 ;;		On entry : B00/0
   829 ;;		On exit  : 0/0
   830 ;;		Unchanged: 0/0
   831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   832 ;;      Params:         0       0       0       0       0
   833 ;;      Locals:         0       0       0       0       0
   834 ;;      Temps:          0       3       0       0       0
   835 ;;      Totals:         0       3       0       0       0
   836 ;;Total ram usage:        3 bytes
   837 ;; Hardware stack levels required when called: 5
   838 ;; This function calls:
   839 ;;		_ADC_Initialize
   840 ;;		_Init_timer
   841 ;;		_Initialize_UART
   842 ;;		_Lcd_Clear
   843 ;;		_Lcd_Print_String
   844 ;;		_Lcd_Set_Cursor
   845 ;;		_Lcd_Start
   846 ;;		_blink
   847 ;;		_initializer
   848 ;;		_operate_buzzer
   849 ;;		_read_sensor
   850 ;;		_send_sms
   851 ;; This function is called by:
   852 ;;		Startup code after reset
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           
   856                           
   857                           ;psect for function _main
   858  03C1                     _main:
   859  03C1                     l1737:	
   860                           ;incstack = 0
   861                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   862                           
   863                           
   864                           ;MQ2 test.c: 215:     Init_timer() ;
   865  03C1  120A  118A  27E7  120A  118A  	fcall	_Init_timer
   866                           
   867                           ;MQ2 test.c: 216:     Initialize_UART() ;
   868  03C6  120A  118A  27C8  120A  118A  	fcall	_Initialize_UART
   869                           
   870                           ;MQ2 test.c: 219:     ADC_Initialize() ;
   871  03CB  120A  118A  22BF  120A  118A  	fcall	_ADC_Initialize
   872  03D0                     l1739:
   873                           
   874                           ;MQ2 test.c: 221:     TRISB = 0 ;
   875  03D0  1683               	bsf	3,5	;RP0=1, select bank1
   876  03D1  1303               	bcf	3,6	;RP1=0, select bank1
   877  03D2  0186               	clrf	6	;volatile
   878  03D3                     l1741:
   879                           
   880                           ;MQ2 test.c: 222:     PORTB = 0B00000000 ;
   881  03D3  1283               	bcf	3,5	;RP0=0, select bank0
   882  03D4  1303               	bcf	3,6	;RP1=0, select bank0
   883  03D5  0186               	clrf	6	;volatile
   884  03D6                     l1743:
   885                           
   886                           ;MQ2 test.c: 224:     TRISD = 0 ;
   887  03D6  1683               	bsf	3,5	;RP0=1, select bank1
   888  03D7  1303               	bcf	3,6	;RP1=0, select bank1
   889  03D8  0188               	clrf	8	;volatile
   890  03D9                     l1745:
   891                           
   892                           ;MQ2 test.c: 225:     PORTD = 0B00000000 ;
   893  03D9  1283               	bcf	3,5	;RP0=0, select bank0
   894  03DA  1303               	bcf	3,6	;RP1=0, select bank0
   895  03DB  0188               	clrf	8	;volatile
   896  03DC                     l1747:
   897                           
   898                           ;MQ2 test.c: 227:     RD0 = 0 ; RD1 = 0 ; RD2 = 0 ; RD3 = 0 ; RD4 = 0 ;
   899  03DC  1008               	bcf	8,0	;volatile
   900  03DD                     l1749:
   901  03DD  1088               	bcf	8,1	;volatile
   902  03DE                     l1751:
   903  03DE  1108               	bcf	8,2	;volatile
   904  03DF                     l1753:
   905  03DF  1188               	bcf	8,3	;volatile
   906  03E0                     l1755:
   907  03E0  1208               	bcf	8,4	;volatile
   908                           
   909                           ;MQ2 test.c: 229:     Lcd_Start() ;
   910  03E1  120A  118A  258A  120A  118A  	fcall	_Lcd_Start
   911                           
   912                           ;MQ2 test.c: 231:     Lcd_Clear() ;
   913  03E6  120A  118A  27DA  120A  118A  	fcall	_Lcd_Clear
   914                           
   915                           ;MQ2 test.c: 232:     Lcd_Set_Cursor( 1, 1) ;
   916  03EB  01F6               	clrf	Lcd_Set_Cursor@b
   917  03EC  0AF6               	incf	Lcd_Set_Cursor@b,f
   918  03ED  3001               	movlw	1
   919  03EE  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
   920  03F3                     l1757:
   921                           
   922                           ;MQ2 test.c: 233:     Lcd_Print_String( "LPG Gas Detector") ;
   923  03F3  304D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
   924  03F4  1283               	bcf	3,5	;RP0=0, select bank0
   925  03F5  1303               	bcf	3,6	;RP1=0, select bank0
   926  03F6  00D0               	movwf	Lcd_Print_String@a
   927  03F7  3080               	movlw	128
   928  03F8  00D1               	movwf	Lcd_Print_String@a+1
   929  03F9  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
   930  03FE                     l1759:
   931                           
   932                           ;MQ2 test.c: 234:     Lcd_Set_Cursor( 2, 1) ;
   933  03FE  01F6               	clrf	Lcd_Set_Cursor@b
   934  03FF  0AF6               	incf	Lcd_Set_Cursor@b,f
   935  0400  3002               	movlw	2
   936  0401  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
   937                           
   938                           ;MQ2 test.c: 235:     Lcd_Print_String( "Ver-0.1");
   939  0406  309C               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
   940  0407  1283               	bcf	3,5	;RP0=0, select bank0
   941  0408  1303               	bcf	3,6	;RP1=0, select bank0
   942  0409  00D0               	movwf	Lcd_Print_String@a
   943  040A  3080               	movlw	128
   944  040B  00D1               	movwf	Lcd_Print_String@a+1
   945  040C  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
   946  0411                     l1761:
   947                           
   948                           ;MQ2 test.c: 237:     RD0 = 1 ; RD1 = 1 ; RD2 = 1 ; RD3 = 1 ;
   949  0411  1283               	bcf	3,5	;RP0=0, select bank0
   950  0412  1303               	bcf	3,6	;RP1=0, select bank0
   951  0413  1408               	bsf	8,0	;volatile
   952  0414                     l1763:
   953  0414  1488               	bsf	8,1	;volatile
   954  0415                     l1765:
   955  0415  1508               	bsf	8,2	;volatile
   956  0416                     l1767:
   957  0416  1588               	bsf	8,3	;volatile
   958  0417                     l1769:
   959                           
   960                           ;MQ2 test.c: 238:     _delay((unsigned long)((1000)*(16000000/4000.0))) ;
   961  0417  3015               	movlw	21
   962  0418  1283               	bcf	3,5	;RP0=0, select bank0
   963  0419  1303               	bcf	3,6	;RP1=0, select bank0
   964  041A  00E7               	movwf	??_main+2
   965  041B  304B               	movlw	75
   966  041C  00E6               	movwf	??_main+1
   967  041D  30BD               	movlw	189
   968  041E  00E5               	movwf	??_main
   969  041F                     u1157:
   970  041F  0BE5               	decfsz	??_main,f
   971  0420  2C1F               	goto	u1157
   972  0421  0BE6               	decfsz	??_main+1,f
   973  0422  2C1F               	goto	u1157
   974  0423  0BE7               	decfsz	??_main+2,f
   975  0424  2C1F               	goto	u1157
   976  0425  2C26               	nop2
   977  0426                     l1771:
   978                           
   979                           ;MQ2 test.c: 240:     RD0 = 0 ; RD1 = 0 ; RD2 = 0 ; RD3 = 0 ;
   980  0426  1283               	bcf	3,5	;RP0=0, select bank0
   981  0427  1303               	bcf	3,6	;RP1=0, select bank0
   982  0428  1008               	bcf	8,0	;volatile
   983  0429                     l1773:
   984  0429  1088               	bcf	8,1	;volatile
   985  042A                     l1775:
   986  042A  1108               	bcf	8,2	;volatile
   987  042B                     l1777:
   988  042B  1188               	bcf	8,3	;volatile
   989  042C                     l1779:
   990                           
   991                           ;MQ2 test.c: 241:     _delay((unsigned long)((1000)*(16000000/4000.0))) ;
   992  042C  3015               	movlw	21
   993  042D  1283               	bcf	3,5	;RP0=0, select bank0
   994  042E  1303               	bcf	3,6	;RP1=0, select bank0
   995  042F  00E7               	movwf	??_main+2
   996  0430  304B               	movlw	75
   997  0431  00E6               	movwf	??_main+1
   998  0432  30BD               	movlw	189
   999  0433  00E5               	movwf	??_main
  1000  0434                     u1167:
  1001  0434  0BE5               	decfsz	??_main,f
  1002  0435  2C34               	goto	u1167
  1003  0436  0BE6               	decfsz	??_main+1,f
  1004  0437  2C34               	goto	u1167
  1005  0438  0BE7               	decfsz	??_main+2,f
  1006  0439  2C34               	goto	u1167
  1007  043A  2C3B               	nop2
  1008                           
  1009                           ;MQ2 test.c: 254:     initializer() ;
  1010  043B  120A  118A  211E  120A  118A  	fcall	_initializer
  1011  0440                     l1781:
  1012                           
  1013                           ;MQ2 test.c: 258:         blink() ;
  1014  0440  120A  118A  26AD  120A  118A  	fcall	_blink
  1015  0445                     l1783:
  1016                           
  1017                           ;MQ2 test.c: 259:         read_sensor() ;
  1018  0445  120A  118A  21F9  120A  118A  	fcall	_read_sensor
  1019                           
  1020                           ;MQ2 test.c: 260:         operate_buzzer() ;
  1021  044A  120A  118A  2624  120A  118A  	fcall	_operate_buzzer
  1022  044F                     l1785:
  1023                           
  1024                           ;MQ2 test.c: 261:         send_sms() ;
  1025  044F  120A  118A  2458  120A  118A  	fcall	_send_sms
  1026  0454  2C40               	goto	l1781
  1027  0455  120A  118A  280C   	ljmp	start
  1028  0458                     __end_of_main:
  1029                           
  1030                           	psect	text1
  1031  0458                     __ptext1:	
  1032 ;; *************** function _send_sms *****************
  1033 ;; Defined at:
  1034 ;;		line 185 in file "MQ2 test.c"
  1035 ;; Parameters:    Size  Location     Type
  1036 ;;		None
  1037 ;; Auto vars:     Size  Location     Type
  1038 ;;		None
  1039 ;; Return value:  Size  Location     Type
  1040 ;;                  1    wreg      void 
  1041 ;; Registers used:
  1042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1043 ;; Tracked objects:
  1044 ;;		On entry : 0/0
  1045 ;;		On exit  : 0/0
  1046 ;;		Unchanged: 0/0
  1047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1048 ;;      Params:         0       0       0       0       0
  1049 ;;      Locals:         0       0       0       0       0
  1050 ;;      Temps:          0       0       0       0       0
  1051 ;;      Totals:         0       0       0       0       0
  1052 ;;Total ram usage:        0 bytes
  1053 ;; Hardware stack levels used: 1
  1054 ;; Hardware stack levels required when called: 3
  1055 ;; This function calls:
  1056 ;;		_UART_send_char
  1057 ;;		_UART_send_string
  1058 ;; This function is called by:
  1059 ;;		_main
  1060 ;; This function uses a non-reentrant model
  1061 ;;
  1062                           
  1063                           
  1064                           ;psect for function _send_sms
  1065  0458                     _send_sms:
  1066  0458                     l1701:	
  1067                           ;incstack = 0
  1068                           ; Regs used in _send_sms: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1069                           
  1070                           
  1071                           ;MQ2 test.c: 186:     if(sms_state == 1){
  1072  0458  1283               	bcf	3,5	;RP0=0, select bank0
  1073  0459  1303               	bcf	3,6	;RP1=0, select bank0
  1074  045A  0336               	decf	_sms_state,w
  1075  045B  0437               	iorwf	_sms_state+1,w
  1076  045C  1D03               	btfss	3,2
  1077  045D  2C5F               	goto	u1071
  1078  045E  2C60               	goto	u1070
  1079  045F                     u1071:
  1080  045F  2CD2               	goto	l233
  1081  0460                     u1070:
  1082  0460                     l1703:
  1083                           
  1084                           ;MQ2 test.c: 187:         if(currentMillis - del_previousMillis >= del_interval ){
  1085  0460  0833               	movf	_currentMillis+3,w
  1086  0461  1D03               	btfss	3,2
  1087  0462  2C72               	goto	u1080
  1088  0463  0832               	movf	_currentMillis+2,w
  1089  0464  1D03               	btfss	3,2
  1090  0465  2C72               	goto	u1080
  1091  0466  3003               	movlw	3
  1092  0467  0231               	subwf	_currentMillis+1,w
  1093  0468  1D03               	skipz
  1094  0469  2C6E               	goto	u1083
  1095  046A  30E8               	movlw	232
  1096  046B  0230               	subwf	_currentMillis,w
  1097  046C  1D03               	skipz
  1098  046D  2C6E               	goto	u1083
  1099  046E                     u1083:
  1100  046E  1C03               	btfss	3,0
  1101  046F  2C71               	goto	u1081
  1102  0470  2C72               	goto	u1080
  1103  0471                     u1081:
  1104  0471  2CD2               	goto	l233
  1105  0472                     u1080:
  1106  0472                     l1705:
  1107                           
  1108                           ;MQ2 test.c: 188:             del_c ++ ;
  1109  0472  3001               	movlw	1
  1110  0473  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0474  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0475  07B4               	addwf	_del_c,f
  1113  0476  1803               	skipnc
  1114  0477  0AB5               	incf	_del_c+1,f
  1115  0478  3000               	movlw	0
  1116  0479  07B5               	addwf	_del_c+1,f
  1117  047A                     l1707:
  1118                           
  1119                           ;MQ2 test.c: 190:             if(del_c == 1){
  1120  047A  0334               	decf	_del_c,w
  1121  047B  0435               	iorwf	_del_c+1,w
  1122  047C  1D03               	btfss	3,2
  1123  047D  2C7F               	goto	u1091
  1124  047E  2C80               	goto	u1090
  1125  047F                     u1091:
  1126  047F  2C8C               	goto	l1711
  1127  0480                     u1090:
  1128  0480                     l1709:
  1129                           
  1130                           ;MQ2 test.c: 191:                 UART_send_string("\n\r") ;
  1131  0480  3033               	movlw	(low (((STR_10+24)-__stringbase)| (0+32768)))& (0+255)
  1132  0481  120A  118A  2773  120A  118A  	fcall	_UART_send_string
  1133                           
  1134                           ;MQ2 test.c: 192:                 UART_send_string("\n\rAT\n\r") ;
  1135  0486  30A4               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1136  0487  120A  118A  2773  120A  118A  	fcall	_UART_send_string
  1137  048C                     l1711:
  1138                           
  1139                           ;MQ2 test.c: 194:             if(del_c == 2){
  1140  048C  3002               	movlw	2
  1141  048D  1283               	bcf	3,5	;RP0=0, select bank0
  1142  048E  1303               	bcf	3,6	;RP1=0, select bank0
  1143  048F  0634               	xorwf	_del_c,w
  1144  0490  0435               	iorwf	_del_c+1,w
  1145  0491  1D03               	btfss	3,2
  1146  0492  2C94               	goto	u1101
  1147  0493  2C95               	goto	u1100
  1148  0494                     u1101:
  1149  0494  2C9B               	goto	l1715
  1150  0495                     u1100:
  1151  0495                     l1713:
  1152                           
  1153                           ;MQ2 test.c: 195:                 UART_send_string("\n\rAT+CMGF=1\n\r ") ;
  1154  0495  305E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1155  0496  120A  118A  2773  120A  118A  	fcall	_UART_send_string
  1156  049B                     l1715:
  1157                           
  1158                           ;MQ2 test.c: 197:             if(del_c == 3){
  1159  049B  3003               	movlw	3
  1160  049C  1283               	bcf	3,5	;RP0=0, select bank0
  1161  049D  1303               	bcf	3,6	;RP1=0, select bank0
  1162  049E  0634               	xorwf	_del_c,w
  1163  049F  0435               	iorwf	_del_c+1,w
  1164  04A0  1D03               	btfss	3,2
  1165  04A1  2CA3               	goto	u1111
  1166  04A2  2CA4               	goto	u1110
  1167  04A3                     u1111:
  1168  04A3  2CAA               	goto	l1719
  1169  04A4                     u1110:
  1170  04A4                     l1717:
  1171                           
  1172                           ;MQ2 test.c: 198:                 UART_send_string("\n\rAT+CMGS=\"+94771632367\"\n\r") ;
  1173  04A4  301B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1174  04A5  120A  118A  2773  120A  118A  	fcall	_UART_send_string
  1175  04AA                     l1719:
  1176                           
  1177                           ;MQ2 test.c: 200:             if(del_c == 4){
  1178  04AA  3004               	movlw	4
  1179  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  1180  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  1181  04AD  0634               	xorwf	_del_c,w
  1182  04AE  0435               	iorwf	_del_c+1,w
  1183  04AF  1D03               	btfss	3,2
  1184  04B0  2CB2               	goto	u1121
  1185  04B1  2CB3               	goto	u1120
  1186  04B2                     u1121:
  1187  04B2  2CC5               	goto	l1727
  1188  04B3                     u1120:
  1189  04B3                     l1721:
  1190                           
  1191                           ;MQ2 test.c: 201:                 UART_send_string("\n\rGas Leak Detected\n\r ") ;
  1192  04B3  3036               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1193  04B4  120A  118A  2773  120A  118A  	fcall	_UART_send_string
  1194  04B9                     l1723:
  1195                           
  1196                           ;MQ2 test.c: 202:                 UART_send_char(26) ;
  1197  04B9  301A               	movlw	26
  1198  04BA  120A  118A  27F3  120A  118A  	fcall	_UART_send_char
  1199  04BF                     l1725:
  1200                           
  1201                           ;MQ2 test.c: 203:                 UART_send_string("\n\r") ;
  1202  04BF  3033               	movlw	(low (((STR_10+24)-__stringbase)| (0+32768)))& (0+255)
  1203  04C0  120A  118A  2773  120A  118A  	fcall	_UART_send_string
  1204  04C5                     l1727:
  1205                           
  1206                           ;MQ2 test.c: 205:             if(del_c == 5){
  1207  04C5  3005               	movlw	5
  1208  04C6  1283               	bcf	3,5	;RP0=0, select bank0
  1209  04C7  1303               	bcf	3,6	;RP1=0, select bank0
  1210  04C8  0634               	xorwf	_del_c,w
  1211  04C9  0435               	iorwf	_del_c+1,w
  1212  04CA  1D03               	btfss	3,2
  1213  04CB  2CCD               	goto	u1131
  1214  04CC  2CCE               	goto	u1130
  1215  04CD                     u1131:
  1216  04CD  2CD2               	goto	l233
  1217  04CE                     u1130:
  1218  04CE                     l1729:
  1219                           
  1220                           ;MQ2 test.c: 206:                 sms_state = 0 ;
  1221  04CE  01B6               	clrf	_sms_state
  1222  04CF  01B7               	clrf	_sms_state+1
  1223                           
  1224                           ;MQ2 test.c: 207:                 del_c = 0 ;
  1225  04D0  01B4               	clrf	_del_c
  1226  04D1  01B5               	clrf	_del_c+1
  1227  04D2                     l233:
  1228  04D2  0008               	return
  1229  04D3                     __end_of_send_sms:
  1230                           
  1231                           	psect	text2
  1232  0773                     __ptext2:	
  1233 ;; *************** function _UART_send_string *****************
  1234 ;; Defined at:
  1235 ;;		line 36 in file "./serial.h"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  st_pt           1    wreg     PTR unsigned char 
  1238 ;;		 -> STR_12(3), STR_11(23), STR_10(27), STR_9(15), 
  1239 ;;		 -> STR_8(7), STR_7(3), 
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;  st_pt           1    4[COMMON] PTR unsigned char 
  1242 ;;		 -> STR_12(3), STR_11(23), STR_10(27), STR_9(15), 
  1243 ;;		 -> STR_8(7), STR_7(3), 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  1    wreg      void 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1253 ;;      Params:         0       0       0       0       0
  1254 ;;      Locals:         1       0       0       0       0
  1255 ;;      Temps:          1       0       0       0       0
  1256 ;;      Totals:         2       0       0       0       0
  1257 ;;Total ram usage:        2 bytes
  1258 ;; Hardware stack levels used: 1
  1259 ;; Hardware stack levels required when called: 2
  1260 ;; This function calls:
  1261 ;;		_UART_send_char
  1262 ;; This function is called by:
  1263 ;;		_send_sms
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           
  1268                           ;psect for function _UART_send_string
  1269  0773                     _UART_send_string:
  1270                           
  1271                           ;incstack = 0
  1272                           ; Regs used in _UART_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1273                           ;UART_send_string@st_pt stored from wreg
  1274  0773  00F4               	movwf	UART_send_string@st_pt
  1275  0774                     l1479:
  1276                           
  1277                           ;./serial.h: 37:     while(*st_pt)
  1278  0774  2F85               	goto	l1485
  1279  0775                     l1481:
  1280                           
  1281                           ;./serial.h: 38:         UART_send_char(*st_pt++) ;
  1282  0775  0874               	movf	UART_send_string@st_pt,w
  1283  0776  0084               	movwf	4
  1284  0777  120A  118A  230A  120A  118A  	fcall	stringdir
  1285  077C  120A  118A  27F3  120A  118A  	fcall	_UART_send_char
  1286  0781                     l1483:
  1287  0781  3001               	movlw	1
  1288  0782  00F3               	movwf	??_UART_send_string
  1289  0783  0873               	movf	??_UART_send_string,w
  1290  0784  07F4               	addwf	UART_send_string@st_pt,f
  1291  0785                     l1485:
  1292                           
  1293                           ;./serial.h: 37:     while(*st_pt)
  1294  0785  0874               	movf	UART_send_string@st_pt,w
  1295  0786  0084               	movwf	4
  1296  0787  120A  118A  230A  120A  118A  	fcall	stringdir
  1297  078C  3A00               	xorlw	0
  1298  078D  1D03               	skipz
  1299  078E  2F90               	goto	u871
  1300  078F  2F91               	goto	u870
  1301  0790                     u871:
  1302  0790  2F75               	goto	l1481
  1303  0791                     u870:
  1304  0791                     l151:
  1305  0791  0008               	return
  1306  0792                     __end_of_UART_send_string:
  1307                           
  1308                           	psect	text3
  1309  07F3                     __ptext3:	
  1310 ;; *************** function _UART_send_char *****************
  1311 ;; Defined at:
  1312 ;;		line 31 in file "./serial.h"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  bt              1    wreg     unsigned char 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  bt              1    2[COMMON] unsigned char 
  1317 ;; Return value:  Size  Location     Type
  1318 ;;                  1    wreg      void 
  1319 ;; Registers used:
  1320 ;;		wreg
  1321 ;; Tracked objects:
  1322 ;;		On entry : 0/0
  1323 ;;		On exit  : 0/0
  1324 ;;		Unchanged: 0/0
  1325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1326 ;;      Params:         0       0       0       0       0
  1327 ;;      Locals:         1       0       0       0       0
  1328 ;;      Temps:          0       0       0       0       0
  1329 ;;      Totals:         1       0       0       0       0
  1330 ;;Total ram usage:        1 bytes
  1331 ;; Hardware stack levels used: 1
  1332 ;; Hardware stack levels required when called: 1
  1333 ;; This function calls:
  1334 ;;		Nothing
  1335 ;; This function is called by:
  1336 ;;		_UART_send_string
  1337 ;;		_send_sms
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _UART_send_char
  1343  07F3                     _UART_send_char:
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _UART_send_char: [wreg]
  1347                           ;UART_send_char@bt stored from wreg
  1348  07F3  00F2               	movwf	UART_send_char@bt
  1349  07F4                     l1397:
  1350  07F4                     l142:	
  1351                           ;./serial.h: 32:     while(!TXIF) ;
  1352                           
  1353  07F4  1283               	bcf	3,5	;RP0=0, select bank0
  1354  07F5  1303               	bcf	3,6	;RP1=0, select bank0
  1355  07F6  1E0C               	btfss	12,4	;volatile
  1356  07F7  2FF9               	goto	u661
  1357  07F8  2FFA               	goto	u660
  1358  07F9                     u661:
  1359  07F9  2FF4               	goto	l142
  1360  07FA                     u660:
  1361  07FA                     l1399:
  1362                           
  1363                           ;./serial.h: 33:     TXREG = bt ;
  1364  07FA  0872               	movf	UART_send_char@bt,w
  1365  07FB  0099               	movwf	25	;volatile
  1366  07FC                     l145:
  1367  07FC  0008               	return
  1368  07FD                     __end_of_UART_send_char:
  1369                           
  1370                           	psect	text4
  1371  01F9                     __ptext4:	
  1372 ;; *************** function _read_sensor *****************
  1373 ;; Defined at:
  1374 ;;		line 141 in file "MQ2 test.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;		None
  1377 ;; Auto vars:     Size  Location     Type
  1378 ;;		None
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  1    wreg      void 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1388 ;;      Params:         0       0       0       0       0
  1389 ;;      Locals:         0       0       0       0       0
  1390 ;;      Temps:          0       4       0       0       0
  1391 ;;      Totals:         0       4       0       0       0
  1392 ;;Total ram usage:        4 bytes
  1393 ;; Hardware stack levels used: 1
  1394 ;; Hardware stack levels required when called: 4
  1395 ;; This function calls:
  1396 ;;		_ADC_Read
  1397 ;;		_Lcd_Print_String
  1398 ;;		_Lcd_Set_Cursor
  1399 ;;		_sprintf
  1400 ;; This function is called by:
  1401 ;;		_main
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           
  1406                           ;psect for function _read_sensor
  1407  01F9                     _read_sensor:
  1408  01F9                     l1651:	
  1409                           ;incstack = 0
  1410                           ; Regs used in _read_sensor: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1411                           
  1412                           
  1413                           ;MQ2 test.c: 143:     analog_read = (ADC_Read(0)) ;
  1414  01F9  3000               	movlw	0
  1415  01FA  120A  118A  2726  120A  118A  	fcall	_ADC_Read
  1416  01FF  0873               	movf	?_ADC_Read+1,w
  1417  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1418  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1419  0202  00BB               	movwf	_analog_read+1
  1420  0203  0872               	movf	?_ADC_Read,w
  1421  0204  00BA               	movwf	_analog_read
  1422  0205                     l1653:
  1423                           
  1424                           ;MQ2 test.c: 145:     sprintf( array, "MQ 2 = %d  ",analog_read ) ;
  1425  0205  307A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1426  0206  00E1               	movwf	??_read_sensor
  1427  0207  0861               	movf	??_read_sensor,w
  1428  0208  00D4               	movwf	sprintf@f
  1429  0209  083B               	movf	_analog_read+1,w
  1430  020A  00D6               	movwf	?_sprintf+2
  1431  020B  083A               	movf	_analog_read,w
  1432  020C  00D5               	movwf	?_sprintf+1
  1433  020D  303C               	movlw	(low (_array| 0))& (0+255)
  1434  020E  120A  118A  2034  120A  118A  	fcall	_sprintf
  1435  0213                     l1655:
  1436                           
  1437                           ;MQ2 test.c: 149:     Lcd_Set_Cursor( 1, 1) ; Lcd_Print_String( array) ;
  1438  0213  01F6               	clrf	Lcd_Set_Cursor@b
  1439  0214  0AF6               	incf	Lcd_Set_Cursor@b,f
  1440  0215  3001               	movlw	1
  1441  0216  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  1442  021B  303C               	movlw	(low (_array| 0))& (0+255)
  1443  021C  1283               	bcf	3,5	;RP0=0, select bank0
  1444  021D  1303               	bcf	3,6	;RP1=0, select bank0
  1445  021E  00D0               	movwf	Lcd_Print_String@a
  1446  021F  3000               	movlw	0
  1447  0220  00D1               	movwf	Lcd_Print_String@a+1
  1448  0221  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
  1449  0226                     l1657:
  1450                           
  1451                           ;MQ2 test.c: 151:     if(analog_read > mq2_thresh){
  1452  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1453  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1454  0228  083B               	movf	_analog_read+1,w
  1455  0229  3A80               	xorlw	128
  1456  022A  00FF               	movwf	btemp+1
  1457  022B  3081               	movlw	129
  1458  022C  027F               	subwf	btemp+1,w
  1459  022D  1D03               	skipz
  1460  022E  2A31               	goto	u1035
  1461  022F  302D               	movlw	45
  1462  0230  023A               	subwf	_analog_read,w
  1463  0231                     u1035:
  1464  0231  1C03               	skipc
  1465  0232  2A34               	goto	u1031
  1466  0233  2A35               	goto	u1030
  1467  0234                     u1031:
  1468  0234  2A9C               	goto	l1683
  1469  0235                     u1030:
  1470  0235                     l1659:
  1471                           
  1472                           ;MQ2 test.c: 152:         Lcd_Set_Cursor( 2, 1) ; Lcd_Print_String("Warning   ") ;
  1473  0235  01F6               	clrf	Lcd_Set_Cursor@b
  1474  0236  0AF6               	incf	Lcd_Set_Cursor@b,f
  1475  0237  3002               	movlw	2
  1476  0238  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  1477  023D                     l1661:
  1478  023D  3091               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1479  023E  1283               	bcf	3,5	;RP0=0, select bank0
  1480  023F  1303               	bcf	3,6	;RP1=0, select bank0
  1481  0240  00D0               	movwf	Lcd_Print_String@a
  1482  0241  3080               	movlw	128
  1483  0242  00D1               	movwf	Lcd_Print_String@a+1
  1484  0243  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
  1485  0248                     l1663:
  1486                           
  1487                           ;MQ2 test.c: 153:         buzzer_state = 1 ;
  1488  0248  3001               	movlw	1
  1489  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1490  024A  1303               	bcf	3,6	;RP1=0, select bank0
  1491  024B  00B8               	movwf	_buzzer_state
  1492  024C  3000               	movlw	0
  1493  024D  00B9               	movwf	_buzzer_state+1
  1494  024E                     l1665:
  1495                           
  1496                           ;MQ2 test.c: 154:         RD2 = 0 ;
  1497  024E  1108               	bcf	8,2	;volatile
  1498  024F                     l1667:
  1499                           
  1500                           ;MQ2 test.c: 155:         RD3 = 1 ;
  1501  024F  1588               	bsf	8,3	;volatile
  1502  0250                     l1669:
  1503                           
  1504                           ;MQ2 test.c: 156:         RD4 = 1 ;
  1505  0250  1608               	bsf	8,4	;volatile
  1506  0251                     l1671:
  1507                           
  1508                           ;MQ2 test.c: 158:         if(f_sms == 1){
  1509  0251  0368               	decf	_f_sms,w
  1510  0252  0469               	iorwf	_f_sms+1,w
  1511  0253  1D03               	btfss	3,2
  1512  0254  2A56               	goto	u1041
  1513  0255  2A57               	goto	u1040
  1514  0256                     u1041:
  1515  0256  2A5F               	goto	l1679
  1516  0257                     u1040:
  1517  0257                     l1673:
  1518                           
  1519                           ;MQ2 test.c: 159:             f_sms = 0 ;
  1520  0257  01E8               	clrf	_f_sms
  1521  0258  01E9               	clrf	_f_sms+1
  1522  0259                     l1675:
  1523                           
  1524                           ;MQ2 test.c: 160:             sms_state = 1 ;
  1525  0259  3001               	movlw	1
  1526  025A  00B6               	movwf	_sms_state
  1527  025B  3000               	movlw	0
  1528  025C  00B7               	movwf	_sms_state+1
  1529  025D                     l1677:
  1530                           
  1531                           ;MQ2 test.c: 161:             del_c = 0 ;
  1532  025D  01B4               	clrf	_del_c
  1533  025E  01B5               	clrf	_del_c+1
  1534  025F                     l1679:
  1535                           
  1536                           ;MQ2 test.c: 165:         if(currentMillis - sms_previousMillis >= sms_interval){
  1537  025F  0830               	movf	_currentMillis,w
  1538  0260  00E1               	movwf	??_read_sensor
  1539  0261  0831               	movf	_currentMillis+1,w
  1540  0262  00E2               	movwf	??_read_sensor+1
  1541  0263  0832               	movf	_currentMillis+2,w
  1542  0264  00E3               	movwf	??_read_sensor+2
  1543  0265  0833               	movf	_currentMillis+3,w
  1544  0266  00E4               	movwf	??_read_sensor+3
  1545  0267  0824               	movf	_sms_previousMillis,w
  1546  0268  02E1               	subwf	??_read_sensor,f
  1547  0269  0825               	movf	_sms_previousMillis+1,w
  1548  026A  1C03               	skipc
  1549  026B  0F25               	incfsz	_sms_previousMillis+1,w
  1550  026C  2A6E               	goto	u1051
  1551  026D  2A6F               	goto	u1052
  1552  026E                     u1051:
  1553  026E  02E2               	subwf	??_read_sensor+1,f
  1554  026F                     u1052:
  1555  026F  0826               	movf	_sms_previousMillis+2,w
  1556  0270  1C03               	skipc
  1557  0271  0F26               	incfsz	_sms_previousMillis+2,w
  1558  0272  2A74               	goto	u1053
  1559  0273  2A75               	goto	u1054
  1560  0274                     u1053:
  1561  0274  02E3               	subwf	??_read_sensor+2,f
  1562  0275                     u1054:
  1563  0275  0827               	movf	_sms_previousMillis+3,w
  1564  0276  1C03               	skipc
  1565  0277  0F27               	incfsz	_sms_previousMillis+3,w
  1566  0278  2A7A               	goto	u1055
  1567  0279  2A7B               	goto	u1056
  1568  027A                     u1055:
  1569  027A  02E4               	subwf	??_read_sensor+3,f
  1570  027B                     u1056:
  1571  027B  0864               	movf	??_read_sensor+3,w
  1572  027C  1D03               	btfss	3,2
  1573  027D  2A8D               	goto	u1060
  1574  027E  0863               	movf	??_read_sensor+2,w
  1575  027F  1D03               	btfss	3,2
  1576  0280  2A8D               	goto	u1060
  1577  0281  3027               	movlw	39
  1578  0282  0262               	subwf	??_read_sensor+1,w
  1579  0283  1D03               	skipz
  1580  0284  2A89               	goto	u1063
  1581  0285  3010               	movlw	16
  1582  0286  0261               	subwf	??_read_sensor,w
  1583  0287  1D03               	skipz
  1584  0288  2A89               	goto	u1063
  1585  0289                     u1063:
  1586  0289  1C03               	btfss	3,0
  1587  028A  2A8C               	goto	u1061
  1588  028B  2A8D               	goto	u1060
  1589  028C                     u1061:
  1590  028C  2ABE               	goto	l223
  1591  028D                     u1060:
  1592  028D                     l1681:
  1593                           
  1594                           ;MQ2 test.c: 166:             sms_previousMillis = currentMillis ;
  1595  028D  1283               	bcf	3,5	;RP0=0, select bank0
  1596  028E  1303               	bcf	3,6	;RP1=0, select bank0
  1597  028F  0833               	movf	_currentMillis+3,w
  1598  0290  00A7               	movwf	_sms_previousMillis+3
  1599  0291  0832               	movf	_currentMillis+2,w
  1600  0292  00A6               	movwf	_sms_previousMillis+2
  1601  0293  0831               	movf	_currentMillis+1,w
  1602  0294  00A5               	movwf	_sms_previousMillis+1
  1603  0295  0830               	movf	_currentMillis,w
  1604  0296  00A4               	movwf	_sms_previousMillis
  1605                           
  1606                           ;MQ2 test.c: 167:             sms_state = 1 ;
  1607  0297  3001               	movlw	1
  1608  0298  00B6               	movwf	_sms_state
  1609  0299  3000               	movlw	0
  1610  029A  00B7               	movwf	_sms_state+1
  1611  029B  2ABE               	goto	l223
  1612  029C                     l1683:
  1613                           
  1614                           ;MQ2 test.c: 172:         Lcd_Set_Cursor( 2, 1) ; Lcd_Print_String("Normal    ") ;
  1615  029C  01F6               	clrf	Lcd_Set_Cursor@b
  1616  029D  0AF6               	incf	Lcd_Set_Cursor@b,f
  1617  029E  3002               	movlw	2
  1618  029F  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  1619  02A4                     l1685:
  1620  02A4  3086               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1621  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  1622  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  1623  02A7  00D0               	movwf	Lcd_Print_String@a
  1624  02A8  3080               	movlw	128
  1625  02A9  00D1               	movwf	Lcd_Print_String@a+1
  1626  02AA  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
  1627  02AF                     l1687:
  1628                           
  1629                           ;MQ2 test.c: 173:         buzzer_state = 0 ;
  1630  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1631  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1632  02B1  01B8               	clrf	_buzzer_state
  1633  02B2  01B9               	clrf	_buzzer_state+1
  1634  02B3                     l1689:
  1635                           
  1636                           ;MQ2 test.c: 174:         sms_state = 0 ;
  1637  02B3  01B6               	clrf	_sms_state
  1638  02B4  01B7               	clrf	_sms_state+1
  1639  02B5                     l1691:
  1640                           
  1641                           ;MQ2 test.c: 175:         del_c = 0 ;
  1642  02B5  01B4               	clrf	_del_c
  1643  02B6  01B5               	clrf	_del_c+1
  1644  02B7                     l1693:
  1645                           
  1646                           ;MQ2 test.c: 176:         RD2 = 1 ;
  1647  02B7  1508               	bsf	8,2	;volatile
  1648  02B8                     l1695:
  1649                           
  1650                           ;MQ2 test.c: 177:         RD3 = 0 ;
  1651  02B8  1188               	bcf	8,3	;volatile
  1652  02B9                     l1697:
  1653                           
  1654                           ;MQ2 test.c: 178:         RD4 = 0 ;
  1655  02B9  1208               	bcf	8,4	;volatile
  1656  02BA                     l1699:
  1657                           
  1658                           ;MQ2 test.c: 180:         f_sms = 1 ;
  1659  02BA  3001               	movlw	1
  1660  02BB  00E8               	movwf	_f_sms
  1661  02BC  3000               	movlw	0
  1662  02BD  00E9               	movwf	_f_sms+1
  1663  02BE                     l223:
  1664  02BE  0008               	return
  1665  02BF                     __end_of_read_sensor:
  1666                           
  1667                           	psect	text5
  1668  0034                     __ptext5:	
  1669 ;; *************** function _sprintf *****************
  1670 ;; Defined at:
  1671 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  sp              1    wreg     PTR unsigned char 
  1674 ;;		 -> array(20), 
  1675 ;;  f               1    4[BANK0 ] PTR const unsigned char 
  1676 ;;		 -> STR_4(12), 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  1679 ;;		 -> array(20), 
  1680 ;;  tmpval          4    0        struct .
  1681 ;;  val             2   13[BANK0 ] unsigned int 
  1682 ;;  cp              2    0        PTR const unsigned char 
  1683 ;;  len             2    0        unsigned int 
  1684 ;;  c               1   16[BANK0 ] unsigned char 
  1685 ;;  prec            1   12[BANK0 ] char 
  1686 ;;  flag            1   11[BANK0 ] unsigned char 
  1687 ;;  ap              1   10[BANK0 ] PTR void [1]
  1688 ;;		 -> ?_sprintf(2), 
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  2    4[BANK0 ] int 
  1691 ;; Registers used:
  1692 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1698 ;;      Params:         0       3       0       0       0
  1699 ;;      Locals:         0       7       0       0       0
  1700 ;;      Temps:          0       3       0       0       0
  1701 ;;      Totals:         0      13       0       0       0
  1702 ;;Total ram usage:       13 bytes
  1703 ;; Hardware stack levels used: 1
  1704 ;; Hardware stack levels required when called: 2
  1705 ;; This function calls:
  1706 ;;		___lwdiv
  1707 ;;		___lwmod
  1708 ;; This function is called by:
  1709 ;;		_read_sensor
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           
  1714                           ;psect for function _sprintf
  1715  0034                     _sprintf:
  1716                           
  1717                           ;incstack = 0
  1718                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1719                           ;sprintf@sp stored from wreg
  1720  0034  1283               	bcf	3,5	;RP0=0, select bank0
  1721  0035  1303               	bcf	3,6	;RP1=0, select bank0
  1722  0036  00DF               	movwf	sprintf@sp
  1723  0037                     l1497:
  1724                           
  1725                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1726  0037  3055               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1727  0038  00D7               	movwf	??_sprintf
  1728  0039  0857               	movf	??_sprintf,w
  1729  003A  00DA               	movwf	sprintf@ap
  1730                           
  1731                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1732  003B  2907               	goto	l1549
  1733  003C                     l1499:
  1734                           
  1735                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1736  003C  3025               	movlw	37
  1737  003D  0660               	xorwf	sprintf@c,w
  1738  003E  1903               	btfsc	3,2
  1739  003F  2841               	goto	u901
  1740  0040  2842               	goto	u900
  1741  0041                     u901:
  1742  0041  284E               	goto	l1505
  1743  0042                     u900:
  1744  0042                     l1501:
  1745                           
  1746                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1747  0042  0860               	movf	sprintf@c,w
  1748  0043  00D7               	movwf	??_sprintf
  1749  0044  085F               	movf	sprintf@sp,w
  1750  0045  0084               	movwf	4
  1751  0046  0857               	movf	??_sprintf,w
  1752  0047  1383               	bcf	3,7	;select IRP bank0
  1753  0048  0080               	movwf	0
  1754  0049                     l1503:
  1755  0049  3001               	movlw	1
  1756  004A  00D7               	movwf	??_sprintf
  1757  004B  0857               	movf	??_sprintf,w
  1758  004C  07DF               	addwf	sprintf@sp,f
  1759                           
  1760                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  1761  004D  2907               	goto	l1549
  1762  004E                     l1505:
  1763                           
  1764                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1765  004E  01DB               	clrf	sprintf@flag
  1766  004F                     l1509:	
  1767                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1768                           
  1769  004F  3001               	movlw	1
  1770  0050  07D4               	addwf	sprintf@f,f
  1771  0051  30FF               	movlw	-1
  1772  0052  0754               	addwf	sprintf@f,w
  1773  0053  0084               	movwf	4
  1774  0054  120A  118A  230A  120A  118A  	fcall	stringdir
  1775  0059  00E0               	movwf	sprintf@c
  1776  005A  00D7               	movwf	??_sprintf
  1777  005B  01D8               	clrf	??_sprintf+1
  1778                           
  1779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1780                           ; Switch size 1, requested type "simple"
  1781                           ; Number of cases is 1, Range of values is 0 to 0
  1782                           ; switch strategies available:
  1783                           ; Name         Instructions Cycles
  1784                           ; simple_byte            4     3 (average)
  1785                           ; direct_byte           11     8 (fixed)
  1786                           ; jumptable            260     6 (fixed)
  1787                           ;	Chosen strategy is simple_byte
  1788  005C  0858               	movf	??_sprintf+1,w
  1789  005D  3A00               	xorlw	0	; case 0
  1790  005E  1903               	skipnz
  1791  005F  2861               	goto	l1807
  1792  0060  2907               	goto	l1549
  1793  0061                     l1807:
  1794                           
  1795                           ; Switch size 1, requested type "simple"
  1796                           ; Number of cases is 3, Range of values is 0 to 105
  1797                           ; switch strategies available:
  1798                           ; Name         Instructions Cycles
  1799                           ; simple_byte           10     6 (average)
  1800                           ; jumptable            260     6 (fixed)
  1801                           ;	Chosen strategy is simple_byte
  1802  0061  0857               	movf	??_sprintf,w
  1803  0062  3A00               	xorlw	0	; case 0
  1804  0063  1903               	skipnz
  1805  0064  2919               	goto	l1551
  1806  0065  3A64               	xorlw	100	; case 100
  1807  0066  1903               	skipnz
  1808  0067  286C               	goto	l1511
  1809  0068  3A0D               	xorlw	13	; case 105
  1810  0069  1903               	skipnz
  1811  006A  286C               	goto	l1511
  1812  006B  2907               	goto	l1549
  1813  006C                     l1511:
  1814                           
  1815                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1816  006C  085A               	movf	sprintf@ap,w
  1817  006D  0084               	movwf	4
  1818  006E  1383               	bcf	3,7	;select IRP bank0
  1819  006F  0800               	movf	0,w
  1820  0070  00DD               	movwf	sprintf@val
  1821  0071  0A84               	incf	4,f
  1822  0072  0800               	movf	0,w
  1823  0073  00DE               	movwf	sprintf@val+1
  1824  0074                     l1513:
  1825  0074  3002               	movlw	2
  1826  0075  00D7               	movwf	??_sprintf
  1827  0076  0857               	movf	??_sprintf,w
  1828  0077  07DA               	addwf	sprintf@ap,f
  1829  0078                     l1515:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1832  0078  1FDE               	btfss	sprintf@val+1,7
  1833  0079  287B               	goto	u911
  1834  007A  287C               	goto	u910
  1835  007B                     u911:
  1836  007B  2885               	goto	l1521
  1837  007C                     u910:
  1838  007C                     l1517:
  1839                           
  1840                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1841  007C  3003               	movlw	3
  1842  007D  00D7               	movwf	??_sprintf
  1843  007E  0857               	movf	??_sprintf,w
  1844  007F  04DB               	iorwf	sprintf@flag,f
  1845  0080                     l1519:
  1846                           
  1847                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1848  0080  09DD               	comf	sprintf@val,f
  1849  0081  09DE               	comf	sprintf@val+1,f
  1850  0082  0ADD               	incf	sprintf@val,f
  1851  0083  1903               	skipnz
  1852  0084  0ADE               	incf	sprintf@val+1,f
  1853  0085                     l1521:
  1854                           
  1855                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1856  0085  01E0               	clrf	sprintf@c
  1857  0086  0AE0               	incf	sprintf@c,f
  1858  0087                     l1527:
  1859                           
  1860                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1861  0087  0860               	movf	sprintf@c,w
  1862  0088  00D7               	movwf	??_sprintf
  1863  0089  0757               	addwf	??_sprintf,w
  1864  008A  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1865  008B  0084               	movwf	4
  1866  008C  120A  118A  230A  120A  118A  	fcall	stringdir
  1867  0091  00D8               	movwf	??_sprintf+1
  1868  0092  120A  118A  230A  120A  118A  	fcall	stringdir
  1869  0097  00D9               	movwf	??_sprintf+2
  1870  0098  0859               	movf	??_sprintf+2,w
  1871  0099  025E               	subwf	sprintf@val+1,w
  1872  009A  1D03               	skipz
  1873  009B  289E               	goto	u925
  1874  009C  0858               	movf	??_sprintf+1,w
  1875  009D  025D               	subwf	sprintf@val,w
  1876  009E                     u925:
  1877  009E  1803               	skipnc
  1878  009F  28A1               	goto	u921
  1879  00A0  28A2               	goto	u920
  1880  00A1                     u921:
  1881  00A1  28A3               	goto	l1531
  1882  00A2                     u920:
  1883  00A2  28AD               	goto	l1533
  1884  00A3                     l1531:
  1885  00A3  3001               	movlw	1
  1886  00A4  00D7               	movwf	??_sprintf
  1887  00A5  0857               	movf	??_sprintf,w
  1888  00A6  07E0               	addwf	sprintf@c,f
  1889  00A7  3005               	movlw	5
  1890  00A8  0660               	xorwf	sprintf@c,w
  1891  00A9  1D03               	btfss	3,2
  1892  00AA  28AC               	goto	u931
  1893  00AB  28AD               	goto	u930
  1894  00AC                     u931:
  1895  00AC  2887               	goto	l1527
  1896  00AD                     u930:
  1897  00AD                     l1533:
  1898                           
  1899                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1900  00AD  085B               	movf	sprintf@flag,w
  1901  00AE  3903               	andlw	3
  1902  00AF  1903               	btfsc	3,2
  1903  00B0  28B2               	goto	u941
  1904  00B1  28B3               	goto	u940
  1905  00B2                     u941:
  1906  00B2  28BE               	goto	l1539
  1907  00B3                     u940:
  1908  00B3                     l1535:
  1909                           
  1910                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1911  00B3  302D               	movlw	45
  1912  00B4  00D7               	movwf	??_sprintf
  1913  00B5  085F               	movf	sprintf@sp,w
  1914  00B6  0084               	movwf	4
  1915  00B7  0857               	movf	??_sprintf,w
  1916  00B8  1383               	bcf	3,7	;select IRP bank0
  1917  00B9  0080               	movwf	0
  1918  00BA                     l1537:
  1919  00BA  3001               	movlw	1
  1920  00BB  00D7               	movwf	??_sprintf
  1921  00BC  0857               	movf	??_sprintf,w
  1922  00BD  07DF               	addwf	sprintf@sp,f
  1923  00BE                     l1539:
  1924                           
  1925                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1926  00BE  0860               	movf	sprintf@c,w
  1927  00BF  00D7               	movwf	??_sprintf
  1928  00C0  0857               	movf	??_sprintf,w
  1929  00C1  00DC               	movwf	sprintf@prec
  1930                           
  1931                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1932  00C2  28FE               	goto	l1547
  1933  00C3                     l1541:
  1934                           
  1935                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1936  00C3  300A               	movlw	10
  1937  00C4  00D0               	movwf	___lwmod@divisor
  1938  00C5  3000               	movlw	0
  1939  00C6  00D1               	movwf	___lwmod@divisor+1
  1940  00C7  085C               	movf	sprintf@prec,w
  1941  00C8  00D7               	movwf	??_sprintf
  1942  00C9  0757               	addwf	??_sprintf,w
  1943  00CA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1944  00CB  0084               	movwf	4
  1945  00CC  120A  118A  230A  120A  118A  	fcall	stringdir
  1946  00D1  00F2               	movwf	___lwdiv@divisor
  1947  00D2  120A  118A  230A  120A  118A  	fcall	stringdir
  1948  00D7  00F3               	movwf	___lwdiv@divisor+1
  1949  00D8  085E               	movf	sprintf@val+1,w
  1950  00D9  00F5               	movwf	___lwdiv@dividend+1
  1951  00DA  085D               	movf	sprintf@val,w
  1952  00DB  00F4               	movwf	___lwdiv@dividend
  1953  00DC  120A  118A  2669  120A  118A  	fcall	___lwdiv
  1954  00E1  0873               	movf	?___lwdiv+1,w
  1955  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1956  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1957  00E4  00D3               	movwf	___lwmod@dividend+1
  1958  00E5  0872               	movf	?___lwdiv,w
  1959  00E6  00D2               	movwf	___lwmod@dividend
  1960  00E7  120A  118A  26EA  120A  118A  	fcall	___lwmod
  1961  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1962  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1963  00EE  0850               	movf	?___lwmod,w
  1964  00EF  3E30               	addlw	48
  1965  00F0  00D8               	movwf	??_sprintf+1
  1966  00F1  0858               	movf	??_sprintf+1,w
  1967  00F2  00E0               	movwf	sprintf@c
  1968  00F3                     l1543:
  1969                           
  1970                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1971  00F3  0860               	movf	sprintf@c,w
  1972  00F4  00D7               	movwf	??_sprintf
  1973  00F5  085F               	movf	sprintf@sp,w
  1974  00F6  0084               	movwf	4
  1975  00F7  0857               	movf	??_sprintf,w
  1976  00F8  1383               	bcf	3,7	;select IRP bank0
  1977  00F9  0080               	movwf	0
  1978  00FA                     l1545:
  1979  00FA  3001               	movlw	1
  1980  00FB  00D7               	movwf	??_sprintf
  1981  00FC  0857               	movf	??_sprintf,w
  1982  00FD  07DF               	addwf	sprintf@sp,f
  1983  00FE                     l1547:
  1984                           
  1985                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1986  00FE  30FF               	movlw	255
  1987  00FF  00D7               	movwf	??_sprintf
  1988  0100  0857               	movf	??_sprintf,w
  1989  0101  07DC               	addwf	sprintf@prec,f
  1990  0102  0A5C               	incf	sprintf@prec,w
  1991  0103  1D03               	btfss	3,2
  1992  0104  2906               	goto	u951
  1993  0105  2907               	goto	u950
  1994  0106                     u951:
  1995  0106  28C3               	goto	l1541
  1996  0107                     u950:
  1997  0107                     l1549:
  1998                           
  1999                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2000  0107  3001               	movlw	1
  2001  0108  07D4               	addwf	sprintf@f,f
  2002  0109  30FF               	movlw	-1
  2003  010A  0754               	addwf	sprintf@f,w
  2004  010B  0084               	movwf	4
  2005  010C  120A  118A  230A  120A  118A  	fcall	stringdir
  2006  0111  00D7               	movwf	??_sprintf
  2007  0112  0857               	movf	??_sprintf,w
  2008  0113  00E0               	movwf	sprintf@c
  2009  0114  0860               	movf	sprintf@c,w
  2010  0115  1D03               	btfss	3,2
  2011  0116  2918               	goto	u961
  2012  0117  2919               	goto	u960
  2013  0118                     u961:
  2014  0118  283C               	goto	l1499
  2015  0119                     u960:
  2016  0119                     l1551:
  2017                           
  2018                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2019  0119  085F               	movf	sprintf@sp,w
  2020  011A  0084               	movwf	4
  2021  011B  1383               	bcf	3,7	;select IRP bank0
  2022  011C  0180               	clrf	0
  2023  011D                     l351:
  2024  011D  0008               	return
  2025  011E                     __end_of_sprintf:
  2026                           
  2027                           	psect	text6
  2028  06EA                     __ptext6:	
  2029 ;; *************** function ___lwmod *****************
  2030 ;; Defined at:
  2031 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;  divisor         2    0[BANK0 ] unsigned int 
  2034 ;;  dividend        2    2[BANK0 ] unsigned int 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  counter         1   11[COMMON] unsigned char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  2    0[BANK0 ] unsigned int 
  2039 ;; Registers used:
  2040 ;;		wreg, status,2, status,0
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2046 ;;      Params:         0       4       0       0       0
  2047 ;;      Locals:         1       0       0       0       0
  2048 ;;      Temps:          1       0       0       0       0
  2049 ;;      Totals:         2       4       0       0       0
  2050 ;;Total ram usage:        6 bytes
  2051 ;; Hardware stack levels used: 1
  2052 ;; Hardware stack levels required when called: 1
  2053 ;; This function calls:
  2054 ;;		Nothing
  2055 ;; This function is called by:
  2056 ;;		_sprintf
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           
  2061                           ;psect for function ___lwmod
  2062  06EA                     ___lwmod:
  2063  06EA                     l1427:	
  2064                           ;incstack = 0
  2065                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2066                           
  2067  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  2068  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  2069  06EC  0850               	movf	___lwmod@divisor,w
  2070  06ED  0451               	iorwf	___lwmod@divisor+1,w
  2071  06EE  1903               	btfsc	3,2
  2072  06EF  2EF1               	goto	u741
  2073  06F0  2EF2               	goto	u740
  2074  06F1                     u741:
  2075  06F1  2F21               	goto	l1445
  2076  06F2                     u740:
  2077  06F2                     l1429:
  2078  06F2  01FB               	clrf	___lwmod@counter
  2079  06F3  0AFB               	incf	___lwmod@counter,f
  2080  06F4  2F00               	goto	l1435
  2081  06F5                     l1431:
  2082  06F5  3001               	movlw	1
  2083  06F6                     u755:
  2084  06F6  1003               	clrc
  2085  06F7  0DD0               	rlf	___lwmod@divisor,f
  2086  06F8  0DD1               	rlf	___lwmod@divisor+1,f
  2087  06F9  3EFF               	addlw	-1
  2088  06FA  1D03               	skipz
  2089  06FB  2EF6               	goto	u755
  2090  06FC                     l1433:
  2091  06FC  3001               	movlw	1
  2092  06FD  00FA               	movwf	??___lwmod
  2093  06FE  087A               	movf	??___lwmod,w
  2094  06FF  07FB               	addwf	___lwmod@counter,f
  2095  0700                     l1435:
  2096  0700  1FD1               	btfss	___lwmod@divisor+1,7
  2097  0701  2F03               	goto	u761
  2098  0702  2F04               	goto	u760
  2099  0703                     u761:
  2100  0703  2EF5               	goto	l1431
  2101  0704                     u760:
  2102  0704                     l1437:
  2103  0704  0851               	movf	___lwmod@divisor+1,w
  2104  0705  0253               	subwf	___lwmod@dividend+1,w
  2105  0706  1D03               	skipz
  2106  0707  2F0A               	goto	u775
  2107  0708  0850               	movf	___lwmod@divisor,w
  2108  0709  0252               	subwf	___lwmod@dividend,w
  2109  070A                     u775:
  2110  070A  1C03               	skipc
  2111  070B  2F0D               	goto	u771
  2112  070C  2F0E               	goto	u770
  2113  070D                     u771:
  2114  070D  2F14               	goto	l1441
  2115  070E                     u770:
  2116  070E                     l1439:
  2117  070E  0850               	movf	___lwmod@divisor,w
  2118  070F  02D2               	subwf	___lwmod@dividend,f
  2119  0710  0851               	movf	___lwmod@divisor+1,w
  2120  0711  1C03               	skipc
  2121  0712  03D3               	decf	___lwmod@dividend+1,f
  2122  0713  02D3               	subwf	___lwmod@dividend+1,f
  2123  0714                     l1441:
  2124  0714  3001               	movlw	1
  2125  0715                     u785:
  2126  0715  1003               	clrc
  2127  0716  0CD1               	rrf	___lwmod@divisor+1,f
  2128  0717  0CD0               	rrf	___lwmod@divisor,f
  2129  0718  3EFF               	addlw	-1
  2130  0719  1D03               	skipz
  2131  071A  2F15               	goto	u785
  2132  071B                     l1443:
  2133  071B  3001               	movlw	1
  2134  071C  02FB               	subwf	___lwmod@counter,f
  2135  071D  1D03               	btfss	3,2
  2136  071E  2F20               	goto	u791
  2137  071F  2F21               	goto	u790
  2138  0720                     u791:
  2139  0720  2F04               	goto	l1437
  2140  0721                     u790:
  2141  0721                     l1445:
  2142  0721  0853               	movf	___lwmod@dividend+1,w
  2143  0722  00D1               	movwf	?___lwmod+1
  2144  0723  0852               	movf	___lwmod@dividend,w
  2145  0724  00D0               	movwf	?___lwmod
  2146  0725                     l637:
  2147  0725  0008               	return
  2148  0726                     __end_of___lwmod:
  2149                           
  2150                           	psect	text7
  2151  0669                     __ptext7:	
  2152 ;; *************** function ___lwdiv *****************
  2153 ;; Defined at:
  2154 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  divisor         2    2[COMMON] unsigned int 
  2157 ;;  dividend        2    4[COMMON] unsigned int 
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;  quotient        2    7[COMMON] unsigned int 
  2160 ;;  counter         1    9[COMMON] unsigned char 
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  2    2[COMMON] unsigned int 
  2163 ;; Registers used:
  2164 ;;		wreg, status,2, status,0
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2170 ;;      Params:         4       0       0       0       0
  2171 ;;      Locals:         3       0       0       0       0
  2172 ;;      Temps:          1       0       0       0       0
  2173 ;;      Totals:         8       0       0       0       0
  2174 ;;Total ram usage:        8 bytes
  2175 ;; Hardware stack levels used: 1
  2176 ;; Hardware stack levels required when called: 1
  2177 ;; This function calls:
  2178 ;;		Nothing
  2179 ;; This function is called by:
  2180 ;;		_sprintf
  2181 ;; This function uses a non-reentrant model
  2182 ;;
  2183                           
  2184                           
  2185                           ;psect for function ___lwdiv
  2186  0669                     ___lwdiv:
  2187  0669                     l1401:	
  2188                           ;incstack = 0
  2189                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2190                           
  2191  0669  01F7               	clrf	___lwdiv@quotient
  2192  066A  01F8               	clrf	___lwdiv@quotient+1
  2193  066B                     l1403:
  2194  066B  0872               	movf	___lwdiv@divisor,w
  2195  066C  0473               	iorwf	___lwdiv@divisor+1,w
  2196  066D  1903               	btfsc	3,2
  2197  066E  2E70               	goto	u671
  2198  066F  2E71               	goto	u670
  2199  0670                     u671:
  2200  0670  2EA8               	goto	l1423
  2201  0671                     u670:
  2202  0671                     l1405:
  2203  0671  01F9               	clrf	___lwdiv@counter
  2204  0672  0AF9               	incf	___lwdiv@counter,f
  2205  0673  2E7F               	goto	l1411
  2206  0674                     l1407:
  2207  0674  3001               	movlw	1
  2208  0675                     u685:
  2209  0675  1003               	clrc
  2210  0676  0DF2               	rlf	___lwdiv@divisor,f
  2211  0677  0DF3               	rlf	___lwdiv@divisor+1,f
  2212  0678  3EFF               	addlw	-1
  2213  0679  1D03               	skipz
  2214  067A  2E75               	goto	u685
  2215  067B                     l1409:
  2216  067B  3001               	movlw	1
  2217  067C  00F6               	movwf	??___lwdiv
  2218  067D  0876               	movf	??___lwdiv,w
  2219  067E  07F9               	addwf	___lwdiv@counter,f
  2220  067F                     l1411:
  2221  067F  1FF3               	btfss	___lwdiv@divisor+1,7
  2222  0680  2E82               	goto	u691
  2223  0681  2E83               	goto	u690
  2224  0682                     u691:
  2225  0682  2E74               	goto	l1407
  2226  0683                     u690:
  2227  0683                     l1413:
  2228  0683  3001               	movlw	1
  2229  0684                     u705:
  2230  0684  1003               	clrc
  2231  0685  0DF7               	rlf	___lwdiv@quotient,f
  2232  0686  0DF8               	rlf	___lwdiv@quotient+1,f
  2233  0687  3EFF               	addlw	-1
  2234  0688  1D03               	skipz
  2235  0689  2E84               	goto	u705
  2236  068A  0873               	movf	___lwdiv@divisor+1,w
  2237  068B  0275               	subwf	___lwdiv@dividend+1,w
  2238  068C  1D03               	skipz
  2239  068D  2E90               	goto	u715
  2240  068E  0872               	movf	___lwdiv@divisor,w
  2241  068F  0274               	subwf	___lwdiv@dividend,w
  2242  0690                     u715:
  2243  0690  1C03               	skipc
  2244  0691  2E93               	goto	u711
  2245  0692  2E94               	goto	u710
  2246  0693                     u711:
  2247  0693  2E9B               	goto	l1419
  2248  0694                     u710:
  2249  0694                     l1415:
  2250  0694  0872               	movf	___lwdiv@divisor,w
  2251  0695  02F4               	subwf	___lwdiv@dividend,f
  2252  0696  0873               	movf	___lwdiv@divisor+1,w
  2253  0697  1C03               	skipc
  2254  0698  03F5               	decf	___lwdiv@dividend+1,f
  2255  0699  02F5               	subwf	___lwdiv@dividend+1,f
  2256  069A                     l1417:
  2257  069A  1477               	bsf	___lwdiv@quotient,0
  2258  069B                     l1419:
  2259  069B  3001               	movlw	1
  2260  069C                     u725:
  2261  069C  1003               	clrc
  2262  069D  0CF3               	rrf	___lwdiv@divisor+1,f
  2263  069E  0CF2               	rrf	___lwdiv@divisor,f
  2264  069F  3EFF               	addlw	-1
  2265  06A0  1D03               	skipz
  2266  06A1  2E9C               	goto	u725
  2267  06A2                     l1421:
  2268  06A2  3001               	movlw	1
  2269  06A3  02F9               	subwf	___lwdiv@counter,f
  2270  06A4  1D03               	btfss	3,2
  2271  06A5  2EA7               	goto	u731
  2272  06A6  2EA8               	goto	u730
  2273  06A7                     u731:
  2274  06A7  2E83               	goto	l1413
  2275  06A8                     u730:
  2276  06A8                     l1423:
  2277  06A8  0878               	movf	___lwdiv@quotient+1,w
  2278  06A9  00F3               	movwf	?___lwdiv+1
  2279  06AA  0877               	movf	___lwdiv@quotient,w
  2280  06AB  00F2               	movwf	?___lwdiv
  2281  06AC                     l627:
  2282  06AC  0008               	return
  2283  06AD                     __end_of___lwdiv:
  2284                           
  2285                           	psect	text8
  2286  0726                     __ptext8:	
  2287 ;; *************** function _ADC_Read *****************
  2288 ;; Defined at:
  2289 ;;		line 88 in file "MQ2 test.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  channel         1    wreg     unsigned char 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  channel         1    6[COMMON] unsigned char 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  2    2[COMMON] unsigned int 
  2296 ;; Registers used:
  2297 ;;		wreg, status,2, status,0
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2303 ;;      Params:         2       0       0       0       0
  2304 ;;      Locals:         1       0       0       0       0
  2305 ;;      Temps:          2       0       0       0       0
  2306 ;;      Totals:         5       0       0       0       0
  2307 ;;Total ram usage:        5 bytes
  2308 ;; Hardware stack levels used: 1
  2309 ;; Hardware stack levels required when called: 1
  2310 ;; This function calls:
  2311 ;;		Nothing
  2312 ;; This function is called by:
  2313 ;;		_read_sensor
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           
  2318                           ;psect for function _ADC_Read
  2319  0726                     _ADC_Read:
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  2323                           ;ADC_Read@channel stored from wreg
  2324  0726  00F6               	movwf	ADC_Read@channel
  2325  0727                     l1487:
  2326                           
  2327                           ;MQ2 test.c: 89:     ADCON0 &= 0x11000101 ;
  2328  0727  3001               	movlw	1
  2329  0728  00F4               	movwf	??_ADC_Read
  2330  0729  0874               	movf	??_ADC_Read,w
  2331  072A  1283               	bcf	3,5	;RP0=0, select bank0
  2332  072B  1303               	bcf	3,6	;RP1=0, select bank0
  2333  072C  059F               	andwf	31,f	;volatile
  2334                           
  2335                           ;MQ2 test.c: 90:     ADCON0 |= channel<<3 ;
  2336  072D  0876               	movf	ADC_Read@channel,w	;volatile
  2337  072E  00F4               	movwf	??_ADC_Read
  2338  072F  3002               	movlw	2
  2339  0730                     u885:
  2340  0730  1003               	clrc
  2341  0731  0DF4               	rlf	??_ADC_Read,f
  2342  0732  3EFF               	addlw	-1
  2343  0733  1D03               	skipz
  2344  0734  2F30               	goto	u885
  2345  0735  1003               	clrc
  2346  0736  0D74               	rlf	??_ADC_Read,w
  2347  0737  00F5               	movwf	??_ADC_Read+1
  2348  0738  0875               	movf	??_ADC_Read+1,w
  2349  0739  049F               	iorwf	31,f	;volatile
  2350  073A                     l1489:
  2351                           
  2352                           ;MQ2 test.c: 91:     _delay((unsigned long)((2)*(16000000/4000.0))) ;
  2353  073A  300B               	movlw	11
  2354  073B  00F5               	movwf	??_ADC_Read+1
  2355  073C  3062               	movlw	98
  2356  073D  00F4               	movwf	??_ADC_Read
  2357  073E                     u1177:
  2358  073E  0BF4               	decfsz	??_ADC_Read,f
  2359  073F  2F3E               	goto	u1177
  2360  0740  0BF5               	decfsz	??_ADC_Read+1,f
  2361  0741  2F3E               	goto	u1177
  2362  0742  0000               	nop
  2363  0743                     l1491:
  2364                           
  2365                           ;MQ2 test.c: 92:     GO_nDONE = 1 ;
  2366  0743  1283               	bcf	3,5	;RP0=0, select bank0
  2367  0744  1303               	bcf	3,6	;RP1=0, select bank0
  2368  0745  151F               	bsf	31,2	;volatile
  2369  0746                     l198:	
  2370                           ;MQ2 test.c: 93:     while(GO_nDONE) ;
  2371                           
  2372  0746  191F               	btfsc	31,2	;volatile
  2373  0747  2F49               	goto	u891
  2374  0748  2F4A               	goto	u890
  2375  0749                     u891:
  2376  0749  2F46               	goto	l198
  2377  074A                     u890:
  2378  074A                     l1493:
  2379                           
  2380                           ;MQ2 test.c: 94:     return ((ADRESH<<8)+ADRESL) ;
  2381  074A  081E               	movf	30,w	;volatile
  2382  074B  00F3               	movwf	?_ADC_Read+1
  2383  074C  1683               	bsf	3,5	;RP0=1, select bank1
  2384  074D  1303               	bcf	3,6	;RP1=0, select bank1
  2385  074E  081E               	movf	30,w	;volatile
  2386  074F  00F2               	movwf	?_ADC_Read
  2387  0750                     l201:
  2388  0750  0008               	return
  2389  0751                     __end_of_ADC_Read:
  2390                           
  2391                           	psect	text9
  2392  0624                     __ptext9:	
  2393 ;; *************** function _operate_buzzer *****************
  2394 ;; Defined at:
  2395 ;;		line 129 in file "MQ2 test.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, status,2, status,0
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2409 ;;      Params:         0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0
  2411 ;;      Temps:          4       0       0       0       0
  2412 ;;      Totals:         4       0       0       0       0
  2413 ;;Total ram usage:        4 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; Hardware stack levels required when called: 1
  2416 ;; This function calls:
  2417 ;;		Nothing
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           
  2424                           ;psect for function _operate_buzzer
  2425  0624                     _operate_buzzer:
  2426  0624                     l1643:	
  2427                           ;incstack = 0
  2428                           ; Regs used in _operate_buzzer: [wreg+status,2+status,0]
  2429                           
  2430                           
  2431                           ;MQ2 test.c: 130:     if(currentMillis - buzzer_previousMillis >= buzzer_interval){
  2432  0624  1283               	bcf	3,5	;RP0=0, select bank0
  2433  0625  1303               	bcf	3,6	;RP1=0, select bank0
  2434  0626  0830               	movf	_currentMillis,w
  2435  0627  00F2               	movwf	??_operate_buzzer
  2436  0628  0831               	movf	_currentMillis+1,w
  2437  0629  00F3               	movwf	??_operate_buzzer+1
  2438  062A  0832               	movf	_currentMillis+2,w
  2439  062B  00F4               	movwf	??_operate_buzzer+2
  2440  062C  0833               	movf	_currentMillis+3,w
  2441  062D  00F5               	movwf	??_operate_buzzer+3
  2442  062E  0828               	movf	_buzzer_previousMillis,w
  2443  062F  02F2               	subwf	??_operate_buzzer,f
  2444  0630  0829               	movf	_buzzer_previousMillis+1,w
  2445  0631  1C03               	skipc
  2446  0632  0F29               	incfsz	_buzzer_previousMillis+1,w
  2447  0633  2E35               	goto	u1001
  2448  0634  2E36               	goto	u1002
  2449  0635                     u1001:
  2450  0635  02F3               	subwf	??_operate_buzzer+1,f
  2451  0636                     u1002:
  2452  0636  082A               	movf	_buzzer_previousMillis+2,w
  2453  0637  1C03               	skipc
  2454  0638  0F2A               	incfsz	_buzzer_previousMillis+2,w
  2455  0639  2E3B               	goto	u1003
  2456  063A  2E3C               	goto	u1004
  2457  063B                     u1003:
  2458  063B  02F4               	subwf	??_operate_buzzer+2,f
  2459  063C                     u1004:
  2460  063C  082B               	movf	_buzzer_previousMillis+3,w
  2461  063D  1C03               	skipc
  2462  063E  0F2B               	incfsz	_buzzer_previousMillis+3,w
  2463  063F  2E41               	goto	u1005
  2464  0640  2E42               	goto	u1006
  2465  0641                     u1005:
  2466  0641  02F5               	subwf	??_operate_buzzer+3,f
  2467  0642                     u1006:
  2468  0642  0875               	movf	??_operate_buzzer+3,w
  2469  0643  1D03               	btfss	3,2
  2470  0644  2E54               	goto	u1010
  2471  0645  0874               	movf	??_operate_buzzer+2,w
  2472  0646  1D03               	btfss	3,2
  2473  0647  2E54               	goto	u1010
  2474  0648  3001               	movlw	1
  2475  0649  0273               	subwf	??_operate_buzzer+1,w
  2476  064A  1D03               	skipz
  2477  064B  2E50               	goto	u1013
  2478  064C  30F4               	movlw	244
  2479  064D  0272               	subwf	??_operate_buzzer,w
  2480  064E  1D03               	skipz
  2481  064F  2E50               	goto	u1013
  2482  0650                     u1013:
  2483  0650  1C03               	btfss	3,0
  2484  0651  2E53               	goto	u1011
  2485  0652  2E54               	goto	u1010
  2486  0653                     u1011:
  2487  0653  2E68               	goto	l216
  2488  0654                     u1010:
  2489  0654                     l1645:
  2490                           
  2491                           ;MQ2 test.c: 131:         buzzer_previousMillis = currentMillis ;
  2492  0654  1283               	bcf	3,5	;RP0=0, select bank0
  2493  0655  1303               	bcf	3,6	;RP1=0, select bank0
  2494  0656  0833               	movf	_currentMillis+3,w
  2495  0657  00AB               	movwf	_buzzer_previousMillis+3
  2496  0658  0832               	movf	_currentMillis+2,w
  2497  0659  00AA               	movwf	_buzzer_previousMillis+2
  2498  065A  0831               	movf	_currentMillis+1,w
  2499  065B  00A9               	movwf	_buzzer_previousMillis+1
  2500  065C  0830               	movf	_currentMillis,w
  2501  065D  00A8               	movwf	_buzzer_previousMillis
  2502  065E                     l1647:
  2503                           
  2504                           ;MQ2 test.c: 132:         if(buzzer_state == 1){
  2505  065E  0338               	decf	_buzzer_state,w
  2506  065F  0439               	iorwf	_buzzer_state+1,w
  2507  0660  1D03               	btfss	3,2
  2508  0661  2E63               	goto	u1021
  2509  0662  2E64               	goto	u1020
  2510  0663                     u1021:
  2511  0663  2E67               	goto	l214
  2512  0664                     u1020:
  2513  0664                     l1649:
  2514                           
  2515                           ;MQ2 test.c: 133:             RD1 =~ RD1 ;
  2516  0664  3002               	movlw	2
  2517  0665  0688               	xorwf	8,f
  2518                           
  2519                           ;MQ2 test.c: 134:             }
  2520  0666  2E68               	goto	l216
  2521  0667                     l214:	
  2522                           ;MQ2 test.c: 135:         else{
  2523                           
  2524                           
  2525                           ;MQ2 test.c: 136:             RD1 = 0 ;
  2526  0667  1088               	bcf	8,1	;volatile
  2527  0668                     l216:
  2528  0668  0008               	return
  2529  0669                     __end_of_operate_buzzer:
  2530                           
  2531                           	psect	text10
  2532  011E                     __ptext10:	
  2533 ;; *************** function _initializer *****************
  2534 ;; Defined at:
  2535 ;;		line 104 in file "MQ2 test.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  i               2   10[BANK0 ] int 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2549 ;;      Params:         0       0       0       0       0
  2550 ;;      Locals:         0       2       0       0       0
  2551 ;;      Temps:          0       3       0       0       0
  2552 ;;      Totals:         0       5       0       0       0
  2553 ;;Total ram usage:        5 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; Hardware stack levels required when called: 4
  2556 ;; This function calls:
  2557 ;;		_Lcd_Clear
  2558 ;;		_Lcd_Print_Char
  2559 ;;		_Lcd_Print_String
  2560 ;;		_Lcd_Set_Cursor
  2561 ;; This function is called by:
  2562 ;;		_main
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           
  2567                           ;psect for function _initializer
  2568  011E                     _initializer:
  2569  011E                     l1597:	
  2570                           ;incstack = 0
  2571                           ; Regs used in _initializer: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2572                           
  2573                           
  2574                           ;MQ2 test.c: 108:     Lcd_Clear() ;
  2575  011E  120A  118A  27DA  120A  118A  	fcall	_Lcd_Clear
  2576                           
  2577                           ;MQ2 test.c: 109:     Lcd_Set_Cursor( 1, 1) ;
  2578  0123  01F6               	clrf	Lcd_Set_Cursor@b
  2579  0124  0AF6               	incf	Lcd_Set_Cursor@b,f
  2580  0125  3001               	movlw	1
  2581  0126  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  2582  012B                     l1599:
  2583                           
  2584                           ;MQ2 test.c: 110:     Lcd_Print_String( "Initializing") ;
  2585  012B  306D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2586  012C  1283               	bcf	3,5	;RP0=0, select bank0
  2587  012D  1303               	bcf	3,6	;RP1=0, select bank0
  2588  012E  00D0               	movwf	Lcd_Print_String@a
  2589  012F  3080               	movlw	128
  2590  0130  00D1               	movwf	Lcd_Print_String@a+1
  2591  0131  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
  2592  0136                     l1601:
  2593                           
  2594                           ;MQ2 test.c: 111:     _delay((unsigned long)((500)*(16000000/4000.0))) ;
  2595  0136  300B               	movlw	11
  2596  0137  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0138  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0139  00D9               	movwf	??_initializer+2
  2599  013A  3026               	movlw	38
  2600  013B  00D8               	movwf	??_initializer+1
  2601  013C  305D               	movlw	93
  2602  013D  00D7               	movwf	??_initializer
  2603  013E                     u1187:
  2604  013E  0BD7               	decfsz	??_initializer,f
  2605  013F  293E               	goto	u1187
  2606  0140  0BD8               	decfsz	??_initializer+1,f
  2607  0141  293E               	goto	u1187
  2608  0142  0BD9               	decfsz	??_initializer+2,f
  2609  0143  293E               	goto	u1187
  2610  0144                     l1603:
  2611                           
  2612                           ;MQ2 test.c: 112:     for(int i = 1 ; i <= 16 ; i++){
  2613  0144  3001               	movlw	1
  2614  0145  1283               	bcf	3,5	;RP0=0, select bank0
  2615  0146  1303               	bcf	3,6	;RP1=0, select bank0
  2616  0147  00DA               	movwf	initializer@i
  2617  0148  3000               	movlw	0
  2618  0149  00DB               	movwf	initializer@i+1
  2619  014A                     l1609:
  2620                           
  2621                           ;MQ2 test.c: 113:         Lcd_Set_Cursor( 2, i) ;
  2622  014A  1283               	bcf	3,5	;RP0=0, select bank0
  2623  014B  1303               	bcf	3,6	;RP1=0, select bank0
  2624  014C  085A               	movf	initializer@i,w
  2625  014D  00D7               	movwf	??_initializer
  2626  014E  0857               	movf	??_initializer,w
  2627  014F  00F6               	movwf	Lcd_Set_Cursor@b
  2628  0150  3002               	movlw	2
  2629  0151  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  2630  0156                     l1611:
  2631                           
  2632                           ;MQ2 test.c: 114:         Lcd_Print_Char(0b11111111) ;
  2633  0156  30FF               	movlw	255
  2634  0157  120A  118A  24D3  120A  118A  	fcall	_Lcd_Print_Char
  2635  015C                     l1613:
  2636                           
  2637                           ;MQ2 test.c: 116:         _delay((unsigned long)((50)*(16000000/4000.0))) ;
  2638  015C  3002               	movlw	2
  2639  015D  1283               	bcf	3,5	;RP0=0, select bank0
  2640  015E  1303               	bcf	3,6	;RP1=0, select bank0
  2641  015F  00D9               	movwf	??_initializer+2
  2642  0160  3004               	movlw	4
  2643  0161  00D8               	movwf	??_initializer+1
  2644  0162  30B9               	movlw	185
  2645  0163  00D7               	movwf	??_initializer
  2646  0164                     u1197:
  2647  0164  0BD7               	decfsz	??_initializer,f
  2648  0165  2964               	goto	u1197
  2649  0166  0BD8               	decfsz	??_initializer+1,f
  2650  0167  2964               	goto	u1197
  2651  0168  0BD9               	decfsz	??_initializer+2,f
  2652  0169  2964               	goto	u1197
  2653  016A  296B               	nop2
  2654  016B                     l1615:
  2655                           
  2656                           ;MQ2 test.c: 117:         }
  2657  016B  3001               	movlw	1
  2658  016C  1283               	bcf	3,5	;RP0=0, select bank0
  2659  016D  1303               	bcf	3,6	;RP1=0, select bank0
  2660  016E  07DA               	addwf	initializer@i,f
  2661  016F  1803               	skipnc
  2662  0170  0ADB               	incf	initializer@i+1,f
  2663  0171  3000               	movlw	0
  2664  0172  07DB               	addwf	initializer@i+1,f
  2665  0173                     l1617:
  2666  0173  085B               	movf	initializer@i+1,w
  2667  0174  3A80               	xorlw	128
  2668  0175  00FF               	movwf	btemp+1
  2669  0176  3080               	movlw	128
  2670  0177  027F               	subwf	btemp+1,w
  2671  0178  1D03               	skipz
  2672  0179  297C               	goto	u995
  2673  017A  3011               	movlw	17
  2674  017B  025A               	subwf	initializer@i,w
  2675  017C                     u995:
  2676  017C  1C03               	skipc
  2677  017D  297F               	goto	u991
  2678  017E  2980               	goto	u990
  2679  017F                     u991:
  2680  017F  294A               	goto	l1609
  2681  0180                     u990:
  2682  0180                     l1619:
  2683                           
  2684                           ;MQ2 test.c: 118:     Lcd_Clear() ;
  2685  0180  120A  118A  27DA  120A  118A  	fcall	_Lcd_Clear
  2686                           
  2687                           ;MQ2 test.c: 119:     Lcd_Set_Cursor( 1, 1) ; Lcd_Print_String( "Initializing") ;
  2688  0185  01F6               	clrf	Lcd_Set_Cursor@b
  2689  0186  0AF6               	incf	Lcd_Set_Cursor@b,f
  2690  0187  3001               	movlw	1
  2691  0188  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  2692  018D                     l1621:
  2693  018D  306D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2694  018E  1283               	bcf	3,5	;RP0=0, select bank0
  2695  018F  1303               	bcf	3,6	;RP1=0, select bank0
  2696  0190  00D0               	movwf	Lcd_Print_String@a
  2697  0191  3080               	movlw	128
  2698  0192  00D1               	movwf	Lcd_Print_String@a+1
  2699  0193  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
  2700  0198                     l1623:
  2701                           
  2702                           ;MQ2 test.c: 120:     Lcd_Set_Cursor( 2, 1) ; Lcd_Print_String( "Done !") ;
  2703  0198  01F6               	clrf	Lcd_Set_Cursor@b
  2704  0199  0AF6               	incf	Lcd_Set_Cursor@b,f
  2705  019A  3002               	movlw	2
  2706  019B  120A  118A  2532  120A  118A  	fcall	_Lcd_Set_Cursor
  2707  01A0  30AB               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2708  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  2709  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  2710  01A3  00D0               	movwf	Lcd_Print_String@a
  2711  01A4  3080               	movlw	128
  2712  01A5  00D1               	movwf	Lcd_Print_String@a+1
  2713  01A6  120A  118A  25DE  120A  118A  	fcall	_Lcd_Print_String
  2714  01AB                     l1625:
  2715                           
  2716                           ;MQ2 test.c: 123:     RD1 = 1 ; _delay((unsigned long)((50)*(16000000/4000.0))) ; RD1 = 
      +                          0 ; _delay((unsigned long)((50)*(16000000/4000.0))) ;
  2717  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  2718  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  2719  01AD  1488               	bsf	8,1	;volatile
  2720  01AE                     l1627:
  2721  01AE  3002               	movlw	2
  2722  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2723  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2724  01B1  00D9               	movwf	??_initializer+2
  2725  01B2  3004               	movlw	4
  2726  01B3  00D8               	movwf	??_initializer+1
  2727  01B4  30B9               	movlw	185
  2728  01B5  00D7               	movwf	??_initializer
  2729  01B6                     u1207:
  2730  01B6  0BD7               	decfsz	??_initializer,f
  2731  01B7  29B6               	goto	u1207
  2732  01B8  0BD8               	decfsz	??_initializer+1,f
  2733  01B9  29B6               	goto	u1207
  2734  01BA  0BD9               	decfsz	??_initializer+2,f
  2735  01BB  29B6               	goto	u1207
  2736  01BC  29BD               	nop2
  2737  01BD                     l1629:
  2738  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  2739  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  2740  01BF  1088               	bcf	8,1	;volatile
  2741  01C0                     l1631:
  2742  01C0  3002               	movlw	2
  2743  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  2744  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  2745  01C3  00D9               	movwf	??_initializer+2
  2746  01C4  3004               	movlw	4
  2747  01C5  00D8               	movwf	??_initializer+1
  2748  01C6  30B9               	movlw	185
  2749  01C7  00D7               	movwf	??_initializer
  2750  01C8                     u1217:
  2751  01C8  0BD7               	decfsz	??_initializer,f
  2752  01C9  29C8               	goto	u1217
  2753  01CA  0BD8               	decfsz	??_initializer+1,f
  2754  01CB  29C8               	goto	u1217
  2755  01CC  0BD9               	decfsz	??_initializer+2,f
  2756  01CD  29C8               	goto	u1217
  2757  01CE  29CF               	nop2
  2758  01CF                     l1633:
  2759                           
  2760                           ;MQ2 test.c: 124:     RD1 = 1 ; _delay((unsigned long)((50)*(16000000/4000.0))) ; RD1 = 
      +                          0 ;
  2761  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  2762  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  2763  01D1  1488               	bsf	8,1	;volatile
  2764  01D2                     l1635:
  2765  01D2  3002               	movlw	2
  2766  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  2767  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  2768  01D5  00D9               	movwf	??_initializer+2
  2769  01D6  3004               	movlw	4
  2770  01D7  00D8               	movwf	??_initializer+1
  2771  01D8  30B9               	movlw	185
  2772  01D9  00D7               	movwf	??_initializer
  2773  01DA                     u1227:
  2774  01DA  0BD7               	decfsz	??_initializer,f
  2775  01DB  29DA               	goto	u1227
  2776  01DC  0BD8               	decfsz	??_initializer+1,f
  2777  01DD  29DA               	goto	u1227
  2778  01DE  0BD9               	decfsz	??_initializer+2,f
  2779  01DF  29DA               	goto	u1227
  2780  01E0  29E1               	nop2
  2781  01E1                     l1637:
  2782  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  2783  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  2784  01E3  1088               	bcf	8,1	;volatile
  2785  01E4                     l1639:
  2786                           
  2787                           ;MQ2 test.c: 125:     _delay((unsigned long)((50)*(16000000/4000.0))) ;
  2788  01E4  3002               	movlw	2
  2789  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  2790  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  2791  01E7  00D9               	movwf	??_initializer+2
  2792  01E8  3004               	movlw	4
  2793  01E9  00D8               	movwf	??_initializer+1
  2794  01EA  30B9               	movlw	185
  2795  01EB  00D7               	movwf	??_initializer
  2796  01EC                     u1237:
  2797  01EC  0BD7               	decfsz	??_initializer,f
  2798  01ED  29EC               	goto	u1237
  2799  01EE  0BD8               	decfsz	??_initializer+1,f
  2800  01EF  29EC               	goto	u1237
  2801  01F0  0BD9               	decfsz	??_initializer+2,f
  2802  01F1  29EC               	goto	u1237
  2803  01F2  29F3               	nop2
  2804  01F3                     l1641:
  2805                           
  2806                           ;MQ2 test.c: 126:     Lcd_Clear() ;
  2807  01F3  120A  118A  27DA  120A  118A  	fcall	_Lcd_Clear
  2808  01F8                     l210:
  2809  01F8  0008               	return
  2810  01F9                     __end_of_initializer:
  2811                           
  2812                           	psect	text11
  2813  0532                     __ptext11:	
  2814 ;; *************** function _Lcd_Set_Cursor *****************
  2815 ;; Defined at:
  2816 ;;		line 47 in file "./lcd.h"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  a               1    wreg     unsigned char 
  2819 ;;  b               1    6[COMMON] unsigned char 
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;  a               1    0[BANK0 ] unsigned char 
  2822 ;;  temp            1    3[BANK0 ] unsigned char 
  2823 ;;  y               1    2[BANK0 ] unsigned char 
  2824 ;;  z               1    1[BANK0 ] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2834 ;;      Params:         1       0       0       0       0
  2835 ;;      Locals:         0       4       0       0       0
  2836 ;;      Temps:          2       0       0       0       0
  2837 ;;      Totals:         3       4       0       0       0
  2838 ;;Total ram usage:        7 bytes
  2839 ;; Hardware stack levels used: 1
  2840 ;; Hardware stack levels required when called: 3
  2841 ;; This function calls:
  2842 ;;		_Lcd_Cmd
  2843 ;; This function is called by:
  2844 ;;		_initializer
  2845 ;;		_read_sensor
  2846 ;;		_main
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           
  2851                           ;psect for function _Lcd_Set_Cursor
  2852  0532                     _Lcd_Set_Cursor:
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2856                           ;Lcd_Set_Cursor@a stored from wreg
  2857  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2858  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2859  0534  00D0               	movwf	Lcd_Set_Cursor@a
  2860  0535                     l1451:
  2861                           
  2862                           ;./lcd.h: 48:     char temp,z,y ;;./lcd.h: 49:     if(a== 1){
  2863  0535  0350               	decf	Lcd_Set_Cursor@a,w
  2864  0536  1D03               	btfss	3,2
  2865  0537  2D39               	goto	u801
  2866  0538  2D3A               	goto	u800
  2867  0539                     u801:
  2868  0539  2D5F               	goto	l1461
  2869  053A                     u800:
  2870  053A                     l1453:
  2871                           
  2872                           ;./lcd.h: 50:       temp = 0x80 + b - 1 ;
  2873  053A  0876               	movf	Lcd_Set_Cursor@b,w
  2874  053B  3E7F               	addlw	127
  2875  053C  00F7               	movwf	??_Lcd_Set_Cursor
  2876  053D  0877               	movf	??_Lcd_Set_Cursor,w
  2877  053E  00D3               	movwf	Lcd_Set_Cursor@temp
  2878                           
  2879                           ;./lcd.h: 51:         z = temp>>4 ;
  2880  053F  0853               	movf	Lcd_Set_Cursor@temp,w
  2881  0540  00F7               	movwf	??_Lcd_Set_Cursor
  2882  0541  3004               	movlw	4
  2883  0542                     u815:
  2884  0542  1003               	clrc
  2885  0543  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2886  0544  3EFF               	addlw	-1
  2887  0545  1D03               	skipz
  2888  0546  2D42               	goto	u815
  2889  0547  0877               	movf	??_Lcd_Set_Cursor,w
  2890  0548  00F8               	movwf	??_Lcd_Set_Cursor+1
  2891  0549  0878               	movf	??_Lcd_Set_Cursor+1,w
  2892  054A  00D1               	movwf	Lcd_Set_Cursor@z
  2893  054B                     l1455:
  2894                           
  2895                           ;./lcd.h: 52:         y = temp & 0x0F ;
  2896  054B  0853               	movf	Lcd_Set_Cursor@temp,w
  2897  054C  390F               	andlw	15
  2898  054D  00F7               	movwf	??_Lcd_Set_Cursor
  2899  054E  0877               	movf	??_Lcd_Set_Cursor,w
  2900  054F  00D2               	movwf	Lcd_Set_Cursor@y
  2901  0550                     l1457:
  2902                           
  2903                           ;./lcd.h: 53:         Lcd_Cmd(z) ;
  2904  0550  0851               	movf	Lcd_Set_Cursor@z,w
  2905  0551  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  2906  0556                     l1459:
  2907                           
  2908                           ;./lcd.h: 54:         Lcd_Cmd(y) ;
  2909  0556  1283               	bcf	3,5	;RP0=0, select bank0
  2910  0557  1303               	bcf	3,6	;RP1=0, select bank0
  2911  0558  0852               	movf	Lcd_Set_Cursor@y,w
  2912  0559  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  2913                           
  2914                           ;./lcd.h: 55:         }
  2915  055E  2D89               	goto	l111
  2916  055F                     l1461:
  2917  055F  3002               	movlw	2
  2918  0560  0650               	xorwf	Lcd_Set_Cursor@a,w
  2919  0561  1D03               	btfss	3,2
  2920  0562  2D64               	goto	u821
  2921  0563  2D65               	goto	u820
  2922  0564                     u821:
  2923  0564  2D89               	goto	l111
  2924  0565                     u820:
  2925  0565                     l1463:
  2926                           
  2927                           ;./lcd.h: 57:         temp = 0xC0 + b - 1 ;
  2928  0565  0876               	movf	Lcd_Set_Cursor@b,w
  2929  0566  3EBF               	addlw	191
  2930  0567  00F7               	movwf	??_Lcd_Set_Cursor
  2931  0568  0877               	movf	??_Lcd_Set_Cursor,w
  2932  0569  00D3               	movwf	Lcd_Set_Cursor@temp
  2933                           
  2934                           ;./lcd.h: 58:         z = temp>>4 ;
  2935  056A  0853               	movf	Lcd_Set_Cursor@temp,w
  2936  056B  00F7               	movwf	??_Lcd_Set_Cursor
  2937  056C  3004               	movlw	4
  2938  056D                     u835:
  2939  056D  1003               	clrc
  2940  056E  0CF7               	rrf	??_Lcd_Set_Cursor,f
  2941  056F  3EFF               	addlw	-1
  2942  0570  1D03               	skipz
  2943  0571  2D6D               	goto	u835
  2944  0572  0877               	movf	??_Lcd_Set_Cursor,w
  2945  0573  00F8               	movwf	??_Lcd_Set_Cursor+1
  2946  0574  0878               	movf	??_Lcd_Set_Cursor+1,w
  2947  0575  00D1               	movwf	Lcd_Set_Cursor@z
  2948  0576                     l1465:
  2949                           
  2950                           ;./lcd.h: 59:         y = temp & 0x0F ;
  2951  0576  0853               	movf	Lcd_Set_Cursor@temp,w
  2952  0577  390F               	andlw	15
  2953  0578  00F7               	movwf	??_Lcd_Set_Cursor
  2954  0579  0877               	movf	??_Lcd_Set_Cursor,w
  2955  057A  00D2               	movwf	Lcd_Set_Cursor@y
  2956  057B                     l1467:
  2957                           
  2958                           ;./lcd.h: 60:         Lcd_Cmd(z) ;
  2959  057B  0851               	movf	Lcd_Set_Cursor@z,w
  2960  057C  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  2961  0581                     l1469:
  2962                           
  2963                           ;./lcd.h: 61:         Lcd_Cmd(y) ;
  2964  0581  1283               	bcf	3,5	;RP0=0, select bank0
  2965  0582  1303               	bcf	3,6	;RP1=0, select bank0
  2966  0583  0852               	movf	Lcd_Set_Cursor@y,w
  2967  0584  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  2968  0589                     l111:
  2969  0589  0008               	return
  2970  058A                     __end_of_Lcd_Set_Cursor:
  2971                           
  2972                           	psect	text12
  2973  05DE                     __ptext12:	
  2974 ;; *************** function _Lcd_Print_String *****************
  2975 ;; Defined at:
  2976 ;;		line 97 in file "./lcd.h"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  a               2    0[BANK0 ] PTR unsigned char 
  2979 ;;		 -> STR_14(8), STR_13(17), STR_6(11), STR_5(11), 
  2980 ;;		 -> array(20), STR_3(7), STR_2(13), STR_1(13), 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  i               2    5[BANK0 ] int 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2992 ;;      Params:         0       2       0       0       0
  2993 ;;      Locals:         0       2       0       0       0
  2994 ;;      Temps:          0       3       0       0       0
  2995 ;;      Totals:         0       7       0       0       0
  2996 ;;Total ram usage:        7 bytes
  2997 ;; Hardware stack levels used: 1
  2998 ;; Hardware stack levels required when called: 3
  2999 ;; This function calls:
  3000 ;;		_Lcd_Print_Char
  3001 ;; This function is called by:
  3002 ;;		_initializer
  3003 ;;		_read_sensor
  3004 ;;		_main
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _Lcd_Print_String
  3010  05DE                     _Lcd_Print_String:
  3011  05DE                     l1471:	
  3012                           ;incstack = 0
  3013                           ; Regs used in _Lcd_Print_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3014                           
  3015                           
  3016                           ;./lcd.h: 98:     int i ;;./lcd.h: 99:     for(i=0;a[i]!='\0';i++)
  3017  05DE  1283               	bcf	3,5	;RP0=0, select bank0
  3018  05DF  1303               	bcf	3,6	;RP1=0, select bank0
  3019  05E0  01D5               	clrf	Lcd_Print_String@i
  3020  05E1  01D6               	clrf	Lcd_Print_String@i+1
  3021  05E2  2E07               	goto	l1477
  3022  05E3                     l1473:
  3023                           
  3024                           ;./lcd.h: 100:        Lcd_Print_Char(a[i]) ;
  3025  05E3  0855               	movf	Lcd_Print_String@i,w
  3026  05E4  0750               	addwf	Lcd_Print_String@a,w
  3027  05E5  00D3               	movwf	??_Lcd_Print_String+1
  3028  05E6  0851               	movf	Lcd_Print_String@a+1,w
  3029  05E7  00D2               	movwf	??_Lcd_Print_String
  3030  05E8  1803               	skipnc
  3031  05E9  0AD2               	incf	??_Lcd_Print_String,f
  3032  05EA  1FD5               	btfss	Lcd_Print_String@i,7
  3033  05EB  2DED               	goto	u840
  3034  05EC  03D2               	decf	??_Lcd_Print_String,f
  3035  05ED                     u840:
  3036  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  3037  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  3038  05EF  0852               	movf	??_Lcd_Print_String,w
  3039  05F0  00D4               	movwf	??_Lcd_Print_String+2
  3040  05F1  0854               	movf	??_Lcd_Print_String+2,w
  3041  05F2  00FF               	movwf	btemp+1
  3042  05F3  0853               	movf	??_Lcd_Print_String+1,w
  3043  05F4  0084               	movwf	4
  3044  05F5  120A  118A  2300  120A  118A  	fcall	stringtab
  3045  05FA  120A  118A  24D3  120A  118A  	fcall	_Lcd_Print_Char
  3046  05FF                     l1475:
  3047  05FF  3001               	movlw	1
  3048  0600  1283               	bcf	3,5	;RP0=0, select bank0
  3049  0601  1303               	bcf	3,6	;RP1=0, select bank0
  3050  0602  07D5               	addwf	Lcd_Print_String@i,f
  3051  0603  1803               	skipnc
  3052  0604  0AD6               	incf	Lcd_Print_String@i+1,f
  3053  0605  3000               	movlw	0
  3054  0606  07D6               	addwf	Lcd_Print_String@i+1,f
  3055  0607                     l1477:
  3056  0607  0855               	movf	Lcd_Print_String@i,w
  3057  0608  0750               	addwf	Lcd_Print_String@a,w
  3058  0609  00D3               	movwf	??_Lcd_Print_String+1
  3059  060A  0851               	movf	Lcd_Print_String@a+1,w
  3060  060B  00D2               	movwf	??_Lcd_Print_String
  3061  060C  1803               	skipnc
  3062  060D  0AD2               	incf	??_Lcd_Print_String,f
  3063  060E  1FD5               	btfss	Lcd_Print_String@i,7
  3064  060F  2E11               	goto	u850
  3065  0610  03D2               	decf	??_Lcd_Print_String,f
  3066  0611                     u850:
  3067  0611  1283               	bcf	3,5	;RP0=0, select bank0
  3068  0612  1303               	bcf	3,6	;RP1=0, select bank0
  3069  0613  0852               	movf	??_Lcd_Print_String,w
  3070  0614  00D4               	movwf	??_Lcd_Print_String+2
  3071  0615  0854               	movf	??_Lcd_Print_String+2,w
  3072  0616  00FF               	movwf	btemp+1
  3073  0617  0853               	movf	??_Lcd_Print_String+1,w
  3074  0618  0084               	movwf	4
  3075  0619  120A  118A  2300  120A  118A  	fcall	stringtab
  3076  061E  3A00               	xorlw	0
  3077  061F  1D03               	skipz
  3078  0620  2E22               	goto	u861
  3079  0621  2E23               	goto	u860
  3080  0622                     u861:
  3081  0622  2DE3               	goto	l1473
  3082  0623                     u860:
  3083  0623                     l129:
  3084  0623  0008               	return
  3085  0624                     __end_of_Lcd_Print_String:
  3086                           
  3087                           	psect	text13
  3088  04D3                     __ptext13:	
  3089 ;; *************** function _Lcd_Print_Char *****************
  3090 ;; Defined at:
  3091 ;;		line 82 in file "./lcd.h"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;  data            1    wreg     unsigned char 
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  data            1    6[COMMON] unsigned char 
  3096 ;;  i               2    9[COMMON] int 
  3097 ;;  i               2    7[COMMON] int 
  3098 ;;  Upper_Nibble    1    5[COMMON] unsigned char 
  3099 ;;  Lower_Nibble    1    4[COMMON] unsigned char 
  3100 ;; Return value:  Size  Location     Type
  3101 ;;                  1    wreg      void 
  3102 ;; Registers used:
  3103 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3104 ;; Tracked objects:
  3105 ;;		On entry : 0/0
  3106 ;;		On exit  : 0/0
  3107 ;;		Unchanged: 0/0
  3108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3109 ;;      Params:         0       0       0       0       0
  3110 ;;      Locals:         7       0       0       0       0
  3111 ;;      Temps:          1       0       0       0       0
  3112 ;;      Totals:         8       0       0       0       0
  3113 ;;Total ram usage:        8 bytes
  3114 ;; Hardware stack levels used: 1
  3115 ;; Hardware stack levels required when called: 2
  3116 ;; This function calls:
  3117 ;;		_Lcd_SetBit
  3118 ;; This function is called by:
  3119 ;;		_Lcd_Print_String
  3120 ;;		_initializer
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           
  3125                           ;psect for function _Lcd_Print_Char
  3126  04D3                     _Lcd_Print_Char:
  3127                           
  3128                           ;incstack = 0
  3129                           ; Regs used in _Lcd_Print_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3130                           ;Lcd_Print_Char@data stored from wreg
  3131  04D3  00F6               	movwf	Lcd_Print_Char@data
  3132  04D4                     l1365:
  3133                           
  3134                           ;./lcd.h: 83:     char Lower_Nibble,Upper_Nibble ;;./lcd.h: 84:     Lower_Nibble = data&
      +                          0x0F ;
  3135  04D4  0876               	movf	Lcd_Print_Char@data,w
  3136  04D5  390F               	andlw	15
  3137  04D6  00F3               	movwf	??_Lcd_Print_Char
  3138  04D7  0873               	movf	??_Lcd_Print_Char,w
  3139  04D8  00F4               	movwf	Lcd_Print_Char@Lower_Nibble
  3140                           
  3141                           ;./lcd.h: 85:     Upper_Nibble = data&0xF0 ;
  3142  04D9  0876               	movf	Lcd_Print_Char@data,w
  3143  04DA  39F0               	andlw	240
  3144  04DB  00F3               	movwf	??_Lcd_Print_Char
  3145  04DC  0873               	movf	??_Lcd_Print_Char,w
  3146  04DD  00F5               	movwf	Lcd_Print_Char@Upper_Nibble
  3147  04DE                     l1367:
  3148                           
  3149                           ;./lcd.h: 86:     RB5 = 1 ;
  3150  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  3151  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  3152  04E0  1686               	bsf	6,5	;volatile
  3153  04E1                     l1369:
  3154                           
  3155                           ;./lcd.h: 87:     Lcd_SetBit(Upper_Nibble>>4) ;
  3156  04E1  0875               	movf	Lcd_Print_Char@Upper_Nibble,w
  3157  04E2  00F3               	movwf	??_Lcd_Print_Char
  3158  04E3  3004               	movlw	4
  3159  04E4                     u635:
  3160  04E4  1003               	clrc
  3161  04E5  0CF3               	rrf	??_Lcd_Print_Char,f
  3162  04E6  3EFF               	addlw	-1
  3163  04E7  1D03               	skipz
  3164  04E8  2CE4               	goto	u635
  3165  04E9  0873               	movf	??_Lcd_Print_Char,w
  3166  04EA  120A  118A  2751  120A  118A  	fcall	_Lcd_SetBit
  3167  04EF                     l1371:
  3168                           
  3169                           ;./lcd.h: 88:     RB4 = 1 ;
  3170  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3171  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  3172  04F1  1606               	bsf	6,4	;volatile
  3173  04F2                     l1373:
  3174                           
  3175                           ;./lcd.h: 89:     for(int i=2130483; i<=0; i--) __nop() ;
  3176  04F2  3033               	movlw	51
  3177  04F3  00F7               	movwf	Lcd_Print_Char@i
  3178  04F4  3082               	movlw	130
  3179  04F5  00F8               	movwf	Lcd_Print_Char@i+1
  3180  04F6                     l119:
  3181  04F6  0000               	nop
  3182  04F7                     l1379:
  3183  04F7  30FF               	movlw	255
  3184  04F8  07F7               	addwf	Lcd_Print_Char@i,f
  3185  04F9  1803               	skipnc
  3186  04FA  0AF8               	incf	Lcd_Print_Char@i+1,f
  3187  04FB  30FF               	movlw	255
  3188  04FC  07F8               	addwf	Lcd_Print_Char@i+1,f
  3189  04FD                     l1381:
  3190  04FD  0878               	movf	Lcd_Print_Char@i+1,w
  3191  04FE  3A80               	xorlw	128
  3192  04FF  00FF               	movwf	btemp+1
  3193  0500  3080               	movlw	128
  3194  0501  027F               	subwf	btemp+1,w
  3195  0502  1D03               	skipz
  3196  0503  2D06               	goto	u645
  3197  0504  3001               	movlw	1
  3198  0505  0277               	subwf	Lcd_Print_Char@i,w
  3199  0506                     u645:
  3200  0506  1C03               	skipc
  3201  0507  2D09               	goto	u641
  3202  0508  2D0A               	goto	u640
  3203  0509                     u641:
  3204  0509  2CF6               	goto	l119
  3205  050A                     u640:
  3206  050A                     l120:
  3207                           
  3208                           ;./lcd.h: 90:     RB4 = 0 ;
  3209  050A  1283               	bcf	3,5	;RP0=0, select bank0
  3210  050B  1303               	bcf	3,6	;RP1=0, select bank0
  3211  050C  1206               	bcf	6,4	;volatile
  3212  050D                     l1383:
  3213                           
  3214                           ;./lcd.h: 91:     Lcd_SetBit(Lower_Nibble) ;
  3215  050D  0874               	movf	Lcd_Print_Char@Lower_Nibble,w
  3216  050E  120A  118A  2751  120A  118A  	fcall	_Lcd_SetBit
  3217  0513                     l1385:
  3218                           
  3219                           ;./lcd.h: 92:     RB4 = 1 ;
  3220  0513  1283               	bcf	3,5	;RP0=0, select bank0
  3221  0514  1303               	bcf	3,6	;RP1=0, select bank0
  3222  0515  1606               	bsf	6,4	;volatile
  3223  0516                     l1387:
  3224                           
  3225                           ;./lcd.h: 93:     for(int i=2130483; i<=0; i--) __nop() ;
  3226  0516  3033               	movlw	51
  3227  0517  00F9               	movwf	Lcd_Print_Char@i_99
  3228  0518  3082               	movlw	130
  3229  0519  00FA               	movwf	Lcd_Print_Char@i_99+1
  3230  051A                     l121:
  3231  051A  0000               	nop
  3232  051B                     l1393:
  3233  051B  30FF               	movlw	255
  3234  051C  07F9               	addwf	Lcd_Print_Char@i_99,f
  3235  051D  1803               	skipnc
  3236  051E  0AFA               	incf	Lcd_Print_Char@i_99+1,f
  3237  051F  30FF               	movlw	255
  3238  0520  07FA               	addwf	Lcd_Print_Char@i_99+1,f
  3239  0521                     l1395:
  3240  0521  087A               	movf	Lcd_Print_Char@i_99+1,w
  3241  0522  3A80               	xorlw	128
  3242  0523  00FF               	movwf	btemp+1
  3243  0524  3080               	movlw	128
  3244  0525  027F               	subwf	btemp+1,w
  3245  0526  1D03               	skipz
  3246  0527  2D2A               	goto	u655
  3247  0528  3001               	movlw	1
  3248  0529  0279               	subwf	Lcd_Print_Char@i_99,w
  3249  052A                     u655:
  3250  052A  1C03               	skipc
  3251  052B  2D2D               	goto	u651
  3252  052C  2D2E               	goto	u650
  3253  052D                     u651:
  3254  052D  2D1A               	goto	l121
  3255  052E                     u650:
  3256  052E                     l122:
  3257                           
  3258                           ;./lcd.h: 94:     RB4 = 0 ;
  3259  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3260  052F  1303               	bcf	3,6	;RP1=0, select bank0
  3261  0530  1206               	bcf	6,4	;volatile
  3262  0531                     l123:
  3263  0531  0008               	return
  3264  0532                     __end_of_Lcd_Print_Char:
  3265                           
  3266                           	psect	text14
  3267  07DA                     __ptext14:	
  3268 ;; *************** function _Lcd_Clear *****************
  3269 ;; Defined at:
  3270 ;;		line 42 in file "./lcd.h"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  2  104[None  ] int 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3284 ;;      Params:         0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0
  3287 ;;      Totals:         0       0       0       0       0
  3288 ;;Total ram usage:        0 bytes
  3289 ;; Hardware stack levels used: 1
  3290 ;; Hardware stack levels required when called: 3
  3291 ;; This function calls:
  3292 ;;		_Lcd_Cmd
  3293 ;; This function is called by:
  3294 ;;		_initializer
  3295 ;;		_main
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _Lcd_Clear
  3301  07DA                     _Lcd_Clear:
  3302  07DA                     l1449:	
  3303                           ;incstack = 0
  3304                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3305                           
  3306                           
  3307                           ;./lcd.h: 43:     Lcd_Cmd(0) ;
  3308  07DA  3000               	movlw	0
  3309  07DB  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3310                           
  3311                           ;./lcd.h: 44:     Lcd_Cmd(1) ;
  3312  07E0  3001               	movlw	1
  3313  07E1  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3314  07E6                     l105:
  3315  07E6  0008               	return
  3316  07E7                     __end_of_Lcd_Clear:
  3317                           
  3318                           	psect	text15
  3319  06AD                     __ptext15:	
  3320 ;; *************** function _blink *****************
  3321 ;; Defined at:
  3322 ;;		line 97 in file "MQ2 test.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;		None
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;		None
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg, status,2, status,0
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3336 ;;      Params:         0       0       0       0       0
  3337 ;;      Locals:         0       0       0       0       0
  3338 ;;      Temps:          4       0       0       0       0
  3339 ;;      Totals:         4       0       0       0       0
  3340 ;;Total ram usage:        4 bytes
  3341 ;; Hardware stack levels used: 1
  3342 ;; Hardware stack levels required when called: 1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_main
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           
  3351                           ;psect for function _blink
  3352  06AD                     _blink:
  3353  06AD                     l1593:	
  3354                           ;incstack = 0
  3355                           ; Regs used in _blink: [wreg+status,2+status,0]
  3356                           
  3357                           
  3358                           ;MQ2 test.c: 98:     if(currentMillis - blink_previousMillis >= blink_interval){
  3359  06AD  1283               	bcf	3,5	;RP0=0, select bank0
  3360  06AE  1303               	bcf	3,6	;RP1=0, select bank0
  3361  06AF  0830               	movf	_currentMillis,w
  3362  06B0  00F2               	movwf	??_blink
  3363  06B1  0831               	movf	_currentMillis+1,w
  3364  06B2  00F3               	movwf	??_blink+1
  3365  06B3  0832               	movf	_currentMillis+2,w
  3366  06B4  00F4               	movwf	??_blink+2
  3367  06B5  0833               	movf	_currentMillis+3,w
  3368  06B6  00F5               	movwf	??_blink+3
  3369  06B7  082C               	movf	_blink_previousMillis,w
  3370  06B8  02F2               	subwf	??_blink,f
  3371  06B9  082D               	movf	_blink_previousMillis+1,w
  3372  06BA  1C03               	skipc
  3373  06BB  0F2D               	incfsz	_blink_previousMillis+1,w
  3374  06BC  2EBE               	goto	u971
  3375  06BD  2EBF               	goto	u972
  3376  06BE                     u971:
  3377  06BE  02F3               	subwf	??_blink+1,f
  3378  06BF                     u972:
  3379  06BF  082E               	movf	_blink_previousMillis+2,w
  3380  06C0  1C03               	skipc
  3381  06C1  0F2E               	incfsz	_blink_previousMillis+2,w
  3382  06C2  2EC4               	goto	u973
  3383  06C3  2EC5               	goto	u974
  3384  06C4                     u973:
  3385  06C4  02F4               	subwf	??_blink+2,f
  3386  06C5                     u974:
  3387  06C5  082F               	movf	_blink_previousMillis+3,w
  3388  06C6  1C03               	skipc
  3389  06C7  0F2F               	incfsz	_blink_previousMillis+3,w
  3390  06C8  2ECA               	goto	u975
  3391  06C9  2ECB               	goto	u976
  3392  06CA                     u975:
  3393  06CA  02F5               	subwf	??_blink+3,f
  3394  06CB                     u976:
  3395  06CB  0875               	movf	??_blink+3,w
  3396  06CC  1D03               	btfss	3,2
  3397  06CD  2EDD               	goto	u980
  3398  06CE  0874               	movf	??_blink+2,w
  3399  06CF  1D03               	btfss	3,2
  3400  06D0  2EDD               	goto	u980
  3401  06D1  3001               	movlw	1
  3402  06D2  0273               	subwf	??_blink+1,w
  3403  06D3  1D03               	skipz
  3404  06D4  2ED9               	goto	u983
  3405  06D5  30F4               	movlw	244
  3406  06D6  0272               	subwf	??_blink,w
  3407  06D7  1D03               	skipz
  3408  06D8  2ED9               	goto	u983
  3409  06D9                     u983:
  3410  06D9  1C03               	btfss	3,0
  3411  06DA  2EDC               	goto	u981
  3412  06DB  2EDD               	goto	u980
  3413  06DC                     u981:
  3414  06DC  2EE9               	goto	l205
  3415  06DD                     u980:
  3416  06DD                     l1595:
  3417                           
  3418                           ;MQ2 test.c: 99:         blink_previousMillis = currentMillis ;
  3419  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  3420  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  3421  06DF  0833               	movf	_currentMillis+3,w
  3422  06E0  00AF               	movwf	_blink_previousMillis+3
  3423  06E1  0832               	movf	_currentMillis+2,w
  3424  06E2  00AE               	movwf	_blink_previousMillis+2
  3425  06E3  0831               	movf	_currentMillis+1,w
  3426  06E4  00AD               	movwf	_blink_previousMillis+1
  3427  06E5  0830               	movf	_currentMillis,w
  3428  06E6  00AC               	movwf	_blink_previousMillis
  3429                           
  3430                           ;MQ2 test.c: 100:         RD0 =~ RD0 ;
  3431  06E7  3001               	movlw	1
  3432  06E8  0688               	xorwf	8,f
  3433  06E9                     l205:
  3434  06E9  0008               	return
  3435  06EA                     __end_of_blink:
  3436                           
  3437                           	psect	text16
  3438  058A                     __ptext16:	
  3439 ;; *************** function _Lcd_Start *****************
  3440 ;; Defined at:
  3441 ;;		line 65 in file "./lcd.h"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  i               2    0        int 
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0, pclath, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3455 ;;      Params:         0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0
  3457 ;;      Temps:          2       0       0       0       0
  3458 ;;      Totals:         2       0       0       0       0
  3459 ;;Total ram usage:        2 bytes
  3460 ;; Hardware stack levels used: 1
  3461 ;; Hardware stack levels required when called: 3
  3462 ;; This function calls:
  3463 ;;		_Lcd_Cmd
  3464 ;;		_Lcd_SetBit
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           
  3471                           ;psect for function _Lcd_Start
  3472  058A                     _Lcd_Start:
  3473  058A                     l1559:	
  3474                           ;incstack = 0
  3475                           ; Regs used in _Lcd_Start: [wreg+status,2+status,0+pclath+cstack]
  3476                           
  3477                           
  3478                           ;./lcd.h: 66:     Lcd_SetBit(0x00) ;
  3479  058A  3000               	movlw	0
  3480  058B  120A  118A  2751  120A  118A  	fcall	_Lcd_SetBit
  3481  0590                     l1561:
  3482  0590                     l1563:
  3483  0590                     l1571:
  3484                           
  3485                           ;./lcd.h: 68:     Lcd_Cmd(0x03) ;
  3486  0590  3003               	movlw	3
  3487  0591  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3488  0596                     l1573:
  3489                           
  3490                           ;./lcd.h: 69:     _delay((unsigned long)((5)*(16000000/4000.0))) ;
  3491  0596  301A               	movlw	26
  3492  0597  00F7               	movwf	??_Lcd_Start+1
  3493  0598  30F8               	movlw	248
  3494  0599  00F6               	movwf	??_Lcd_Start
  3495  059A                     u1247:
  3496  059A  0BF6               	decfsz	??_Lcd_Start,f
  3497  059B  2D9A               	goto	u1247
  3498  059C  0BF7               	decfsz	??_Lcd_Start+1,f
  3499  059D  2D9A               	goto	u1247
  3500  059E  0000               	nop
  3501  059F                     l1575:
  3502                           
  3503                           ;./lcd.h: 70:     Lcd_Cmd(0x03) ;
  3504  059F  3003               	movlw	3
  3505  05A0  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3506                           
  3507                           ;./lcd.h: 71:     _delay((unsigned long)((11)*(16000000/4000.0))) ;
  3508  05A5  303A               	movlw	58
  3509  05A6  00F7               	movwf	??_Lcd_Start+1
  3510  05A7  3023               	movlw	35
  3511  05A8  00F6               	movwf	??_Lcd_Start
  3512  05A9                     u1257:
  3513  05A9  0BF6               	decfsz	??_Lcd_Start,f
  3514  05AA  2DA9               	goto	u1257
  3515  05AB  0BF7               	decfsz	??_Lcd_Start+1,f
  3516  05AC  2DA9               	goto	u1257
  3517  05AD                     l1577:
  3518                           
  3519                           ;./lcd.h: 72:     Lcd_Cmd(0x03) ;
  3520  05AD  3003               	movlw	3
  3521  05AE  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3522  05B3                     l1579:
  3523                           
  3524                           ;./lcd.h: 73:     Lcd_Cmd(0x02) ;
  3525  05B3  3002               	movlw	2
  3526  05B4  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3527  05B9                     l1581:
  3528                           
  3529                           ;./lcd.h: 74:     Lcd_Cmd(0x02) ;
  3530  05B9  3002               	movlw	2
  3531  05BA  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3532  05BF                     l1583:
  3533                           
  3534                           ;./lcd.h: 75:     Lcd_Cmd(0x08) ;
  3535  05BF  3008               	movlw	8
  3536  05C0  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3537  05C5                     l1585:
  3538                           
  3539                           ;./lcd.h: 76:     Lcd_Cmd(0x00) ;
  3540  05C5  3000               	movlw	0
  3541  05C6  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3542  05CB                     l1587:
  3543                           
  3544                           ;./lcd.h: 77:     Lcd_Cmd(0x0C) ;
  3545  05CB  300C               	movlw	12
  3546  05CC  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3547  05D1                     l1589:
  3548                           
  3549                           ;./lcd.h: 78:     Lcd_Cmd(0x00) ;
  3550  05D1  3000               	movlw	0
  3551  05D2  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3552  05D7                     l1591:
  3553                           
  3554                           ;./lcd.h: 79:     Lcd_Cmd(0x06) ;
  3555  05D7  3006               	movlw	6
  3556  05D8  120A  118A  27AE  120A  118A  	fcall	_Lcd_Cmd
  3557  05DD                     l116:
  3558  05DD  0008               	return
  3559  05DE                     __end_of_Lcd_Start:
  3560                           
  3561                           	psect	text17
  3562  07AE                     __ptext17:	
  3563 ;; *************** function _Lcd_Cmd *****************
  3564 ;; Defined at:
  3565 ;;		line 34 in file "./lcd.h"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  a               1    wreg     unsigned char 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  a               1    5[COMMON] unsigned char 
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, status,2, status,0, pclath, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3579 ;;      Params:         0       0       0       0       0
  3580 ;;      Locals:         1       0       0       0       0
  3581 ;;      Temps:          2       0       0       0       0
  3582 ;;      Totals:         3       0       0       0       0
  3583 ;;Total ram usage:        3 bytes
  3584 ;; Hardware stack levels used: 1
  3585 ;; Hardware stack levels required when called: 2
  3586 ;; This function calls:
  3587 ;;		_Lcd_SetBit
  3588 ;; This function is called by:
  3589 ;;		_Lcd_Clear
  3590 ;;		_Lcd_Set_Cursor
  3591 ;;		_Lcd_Start
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           
  3596                           ;psect for function _Lcd_Cmd
  3597  07AE                     _Lcd_Cmd:
  3598                           
  3599                           ;incstack = 0
  3600                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3601                           ;Lcd_Cmd@a stored from wreg
  3602  07AE  00F5               	movwf	Lcd_Cmd@a
  3603  07AF                     l1355:
  3604                           
  3605                           ;./lcd.h: 35:     RB5 = 0 ;
  3606  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  3607  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  3608  07B1  1286               	bcf	6,5	;volatile
  3609  07B2                     l1357:
  3610                           
  3611                           ;./lcd.h: 36:     Lcd_SetBit(a) ;
  3612  07B2  0875               	movf	Lcd_Cmd@a,w
  3613  07B3  120A  118A  2751  120A  118A  	fcall	_Lcd_SetBit
  3614  07B8                     l1359:
  3615                           
  3616                           ;./lcd.h: 37:     RB4 = 1 ;
  3617  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  3618  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  3619  07BA  1606               	bsf	6,4	;volatile
  3620  07BB                     l1361:
  3621                           
  3622                           ;./lcd.h: 38:     _delay((unsigned long)((4)*(16000000/4000.0))) ;
  3623  07BB  3015               	movlw	21
  3624  07BC  00F4               	movwf	??_Lcd_Cmd+1
  3625  07BD  30C6               	movlw	198
  3626  07BE  00F3               	movwf	??_Lcd_Cmd
  3627  07BF                     u1267:
  3628  07BF  0BF3               	decfsz	??_Lcd_Cmd,f
  3629  07C0  2FBF               	goto	u1267
  3630  07C1  0BF4               	decfsz	??_Lcd_Cmd+1,f
  3631  07C2  2FBF               	goto	u1267
  3632  07C3  0000               	nop
  3633  07C4                     l1363:
  3634                           
  3635                           ;./lcd.h: 39:     RB4 = 0 ;
  3636  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  3637  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  3638  07C6  1206               	bcf	6,4	;volatile
  3639  07C7                     l102:
  3640  07C7  0008               	return
  3641  07C8                     __end_of_Lcd_Cmd:
  3642                           
  3643                           	psect	text18
  3644  0751                     __ptext18:	
  3645 ;; *************** function _Lcd_SetBit *****************
  3646 ;; Defined at:
  3647 ;;		line 12 in file "./lcd.h"
  3648 ;; Parameters:    Size  Location     Type
  3649 ;;  data_bit        1    wreg     unsigned char 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  data_bit        1    2[COMMON] unsigned char 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3661 ;;      Params:         0       0       0       0       0
  3662 ;;      Locals:         1       0       0       0       0
  3663 ;;      Temps:          0       0       0       0       0
  3664 ;;      Totals:         1       0       0       0       0
  3665 ;;Total ram usage:        1 bytes
  3666 ;; Hardware stack levels used: 1
  3667 ;; Hardware stack levels required when called: 1
  3668 ;; This function calls:
  3669 ;;		Nothing
  3670 ;; This function is called by:
  3671 ;;		_Lcd_Cmd
  3672 ;;		_Lcd_Start
  3673 ;;		_Lcd_Print_Char
  3674 ;; This function uses a non-reentrant model
  3675 ;;
  3676                           
  3677                           
  3678                           ;psect for function _Lcd_SetBit
  3679  0751                     _Lcd_SetBit:
  3680                           
  3681                           ;incstack = 0
  3682                           ; Regs used in _Lcd_SetBit: [wreg]
  3683                           ;Lcd_SetBit@data_bit stored from wreg
  3684  0751  00F2               	movwf	Lcd_SetBit@data_bit
  3685  0752                     l1345:
  3686                           
  3687                           ;./lcd.h: 13:     if(data_bit& 1)
  3688  0752  1C72               	btfss	Lcd_SetBit@data_bit,0
  3689  0753  2F55               	goto	u591
  3690  0754  2F56               	goto	u590
  3691  0755                     u591:
  3692  0755  2F5A               	goto	l91
  3693  0756                     u590:
  3694  0756                     l1347:
  3695                           
  3696                           ;./lcd.h: 14:         RB3 = 1 ;
  3697  0756  1283               	bcf	3,5	;RP0=0, select bank0
  3698  0757  1303               	bcf	3,6	;RP1=0, select bank0
  3699  0758  1586               	bsf	6,3	;volatile
  3700  0759  2F5D               	goto	l92
  3701  075A                     l91:	
  3702                           ;./lcd.h: 15:     else
  3703                           
  3704                           
  3705                           ;./lcd.h: 16:         RB3 = 0 ;
  3706  075A  1283               	bcf	3,5	;RP0=0, select bank0
  3707  075B  1303               	bcf	3,6	;RP1=0, select bank0
  3708  075C  1186               	bcf	6,3	;volatile
  3709  075D                     l92:
  3710                           
  3711                           ;./lcd.h: 18:     if(data_bit& 2)
  3712  075D  1CF2               	btfss	Lcd_SetBit@data_bit,1
  3713  075E  2F60               	goto	u601
  3714  075F  2F61               	goto	u600
  3715  0760                     u601:
  3716  0760  2F63               	goto	l93
  3717  0761                     u600:
  3718  0761                     l1349:
  3719                           
  3720                           ;./lcd.h: 19:         RB2 = 1 ;
  3721  0761  1506               	bsf	6,2	;volatile
  3722  0762  2F64               	goto	l94
  3723  0763                     l93:	
  3724                           ;./lcd.h: 20:     else
  3725                           
  3726                           
  3727                           ;./lcd.h: 21:         RB2 = 0 ;
  3728  0763  1106               	bcf	6,2	;volatile
  3729  0764                     l94:
  3730                           
  3731                           ;./lcd.h: 23:     if(data_bit& 4)
  3732  0764  1D72               	btfss	Lcd_SetBit@data_bit,2
  3733  0765  2F67               	goto	u611
  3734  0766  2F68               	goto	u610
  3735  0767                     u611:
  3736  0767  2F6A               	goto	l95
  3737  0768                     u610:
  3738  0768                     l1351:
  3739                           
  3740                           ;./lcd.h: 24:         RB1 = 1 ;
  3741  0768  1486               	bsf	6,1	;volatile
  3742  0769  2F6B               	goto	l96
  3743  076A                     l95:	
  3744                           ;./lcd.h: 25:     else
  3745                           
  3746                           
  3747                           ;./lcd.h: 26:         RB1 = 0 ;
  3748  076A  1086               	bcf	6,1	;volatile
  3749  076B                     l96:
  3750                           
  3751                           ;./lcd.h: 28:     if(data_bit& 8)
  3752  076B  1DF2               	btfss	Lcd_SetBit@data_bit,3
  3753  076C  2F6E               	goto	u621
  3754  076D  2F6F               	goto	u620
  3755  076E                     u621:
  3756  076E  2F71               	goto	l97
  3757  076F                     u620:
  3758  076F                     l1353:
  3759                           
  3760                           ;./lcd.h: 29:         RB0 = 1 ;
  3761  076F  1406               	bsf	6,0	;volatile
  3762  0770  2F72               	goto	l99
  3763  0771                     l97:	
  3764                           ;./lcd.h: 30:     else
  3765                           
  3766                           
  3767                           ;./lcd.h: 31:         RB0 = 0 ;
  3768  0771  1006               	bcf	6,0	;volatile
  3769  0772                     l99:
  3770  0772  0008               	return
  3771  0773                     __end_of_Lcd_SetBit:
  3772                           
  3773                           	psect	text19
  3774  07C8                     __ptext19:	
  3775 ;; *************** function _Initialize_UART *****************
  3776 ;; Defined at:
  3777 ;;		line 5 in file "./serial.h"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;		None
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		wreg
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3791 ;;      Params:         0       0       0       0       0
  3792 ;;      Locals:         0       0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0
  3794 ;;      Totals:         0       0       0       0       0
  3795 ;;Total ram usage:        0 bytes
  3796 ;; Hardware stack levels used: 1
  3797 ;; Hardware stack levels required when called: 1
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_main
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _Initialize_UART
  3807  07C8                     _Initialize_UART:
  3808  07C8                     l1109:	
  3809                           ;incstack = 0
  3810                           ; Regs used in _Initialize_UART: [wreg]
  3811                           
  3812                           
  3813                           ;./serial.h: 6:     TRISC6 = 0 ;
  3814  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  3815  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  3816  07CA  1307               	bcf	7,6	;volatile
  3817                           
  3818                           ;./serial.h: 7:     TRISC7 = 1 ;
  3819  07CB  1787               	bsf	7,7	;volatile
  3820                           
  3821                           ;./serial.h: 9:     TX9 = 0 ;
  3822  07CC  1318               	bcf	24,6	;volatile
  3823                           
  3824                           ;./serial.h: 10:     TXEN = 1 ;
  3825  07CD  1698               	bsf	24,5	;volatile
  3826                           
  3827                           ;./serial.h: 11:     SYNC = 0 ;
  3828  07CE  1218               	bcf	24,4	;volatile
  3829                           
  3830                           ;./serial.h: 12:     BRGH = 1 ;
  3831  07CF  1518               	bsf	24,2	;volatile
  3832                           
  3833                           ;./serial.h: 14:     SPEN = 1 ;
  3834  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  3835  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  3836  07D2  1798               	bsf	24,7	;volatile
  3837                           
  3838                           ;./serial.h: 15:     RX9 = 0 ;
  3839  07D3  1318               	bcf	24,6	;volatile
  3840                           
  3841                           ;./serial.h: 16:     CREN = 1 ;
  3842  07D4  1618               	bsf	24,4	;volatile
  3843  07D5                     l1111:
  3844                           
  3845                           ;./serial.h: 18:     SPBRG = ((16000000/16)/9600) - 1 ;
  3846  07D5  3067               	movlw	103
  3847  07D6  1683               	bsf	3,5	;RP0=1, select bank1
  3848  07D7  1303               	bcf	3,6	;RP1=0, select bank1
  3849  07D8  0099               	movwf	25	;volatile
  3850  07D9                     l132:
  3851  07D9  0008               	return
  3852  07DA                     __end_of_Initialize_UART:
  3853                           
  3854                           	psect	text20
  3855  07E7                     __ptext20:	
  3856 ;; *************** function _Init_timer *****************
  3857 ;; Defined at:
  3858 ;;		line 68 in file "MQ2 test.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;		None
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3872 ;;      Params:         0       0       0       0       0
  3873 ;;      Locals:         0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0
  3875 ;;      Totals:         0       0       0       0       0
  3876 ;;Total ram usage:        0 bytes
  3877 ;; Hardware stack levels used: 1
  3878 ;; Hardware stack levels required when called: 1
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_main
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _Init_timer
  3888  07E7                     _Init_timer:
  3889  07E7                     l1113:	
  3890                           ;incstack = 0
  3891                           ; Regs used in _Init_timer: [wreg]
  3892                           
  3893                           
  3894                           ;MQ2 test.c: 69:     OPTION_REG = 0b00000100 ;
  3895  07E7  3004               	movlw	4
  3896  07E8  1683               	bsf	3,5	;RP0=1, select bank1
  3897  07E9  1303               	bcf	3,6	;RP1=0, select bank1
  3898  07EA  0081               	movwf	1	;volatile
  3899                           
  3900                           ;MQ2 test.c: 70:     TMR0 = 100 ;
  3901  07EB  3064               	movlw	100
  3902  07EC  1283               	bcf	3,5	;RP0=0, select bank0
  3903  07ED  1303               	bcf	3,6	;RP1=0, select bank0
  3904  07EE  0081               	movwf	1	;volatile
  3905  07EF                     l1115:
  3906                           
  3907                           ;MQ2 test.c: 71:     GIE = 1 ;
  3908  07EF  178B               	bsf	11,7	;volatile
  3909  07F0                     l1117:
  3910                           
  3911                           ;MQ2 test.c: 72:     PEIE = 1 ;
  3912  07F0  170B               	bsf	11,6	;volatile
  3913  07F1                     l1119:
  3914                           
  3915                           ;MQ2 test.c: 73:     TMR0IE = 1 ;
  3916  07F1  168B               	bsf	11,5	;volatile
  3917  07F2                     l186:
  3918  07F2  0008               	return
  3919  07F3                     __end_of_Init_timer:
  3920                           
  3921                           	psect	text21
  3922  02BF                     __ptext21:	
  3923 ;; *************** function _ADC_Initialize *****************
  3924 ;; Defined at:
  3925 ;;		line 83 in file "MQ2 test.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;		None
  3928 ;; Auto vars:     Size  Location     Type
  3929 ;;		None
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3939 ;;      Params:         0       0       0       0       0
  3940 ;;      Locals:         0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0
  3942 ;;      Totals:         0       0       0       0       0
  3943 ;;Total ram usage:        0 bytes
  3944 ;; Hardware stack levels used: 1
  3945 ;; Hardware stack levels required when called: 1
  3946 ;; This function calls:
  3947 ;;		Nothing
  3948 ;; This function is called by:
  3949 ;;		_main
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           
  3954                           ;psect for function _ADC_Initialize
  3955  02BF                     _ADC_Initialize:
  3956  02BF                     l1121:	
  3957                           ;incstack = 0
  3958                           ; Regs used in _ADC_Initialize: [wreg]
  3959                           
  3960                           
  3961                           ;MQ2 test.c: 84:     ADCON0 = 0b01000001 ;
  3962  02BF  3041               	movlw	65
  3963  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3964  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  3965  02C2  009F               	movwf	31	;volatile
  3966                           
  3967                           ;MQ2 test.c: 85:     ADCON1 = 0b11000000 ;
  3968  02C3  30C0               	movlw	192
  3969  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  3970  02C5  1303               	bcf	3,6	;RP1=0, select bank1
  3971  02C6  009F               	movwf	31	;volatile
  3972  02C7                     l195:
  3973  02C7  0008               	return
  3974  02C8                     __end_of_ADC_Initialize:
  3975                           
  3976                           	psect	text22
  3977  0792                     __ptext22:	
  3978 ;; *************** function _timer_isr *****************
  3979 ;; Defined at:
  3980 ;;		line 76 in file "MQ2 test.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		wreg
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3994 ;;      Params:         0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0
  3996 ;;      Temps:          2       0       0       0       0
  3997 ;;      Totals:         2       0       0       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used: 1
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		Interrupt level 1
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _timer_isr
  4009  0792                     _timer_isr:
  4010  0792                     i1l1731:
  4011                           
  4012                           ;MQ2 test.c: 77:     if( TMR0IF == 1){
  4013  0792  1D0B               	btfss	11,2	;volatile
  4014  0793  2F95               	goto	u114_21
  4015  0794  2F96               	goto	u114_20
  4016  0795                     u114_21:
  4017  0795  2FA7               	goto	i1l192
  4018  0796                     u114_20:
  4019  0796                     i1l1733:
  4020                           
  4021                           ;MQ2 test.c: 78:         TMR0IF = 0 ;
  4022  0796  110B               	bcf	11,2	;volatile
  4023  0797                     i1l1735:
  4024                           
  4025                           ;MQ2 test.c: 79:         currentMillis ++ ;
  4026  0797  3001               	movlw	1
  4027  0798  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0799  1303               	bcf	3,6	;RP1=0, select bank0
  4029  079A  07B0               	addwf	_currentMillis,f
  4030  079B  3000               	movlw	0
  4031  079C  1803               	skipnc
  4032  079D  3001               	movlw	1
  4033  079E  07B1               	addwf	_currentMillis+1,f
  4034  079F  3000               	movlw	0
  4035  07A0  1803               	skipnc
  4036  07A1  3001               	movlw	1
  4037  07A2  07B2               	addwf	_currentMillis+2,f
  4038  07A3  3000               	movlw	0
  4039  07A4  1803               	skipnc
  4040  07A5  3001               	movlw	1
  4041  07A6  07B3               	addwf	_currentMillis+3,f
  4042  07A7                     i1l192:
  4043  07A7  0871               	movf	??_timer_isr+1,w
  4044  07A8  008A               	movwf	10
  4045  07A9  0E70               	swapf	??_timer_isr,w
  4046  07AA  0083               	movwf	3
  4047  07AB  0EFE               	swapf	btemp,f
  4048  07AC  0E7E               	swapf	btemp,w
  4049  07AD  0009               	retfie
  4050  07AE                     __end_of_timer_isr:
  4051  007E                     btemp	set	126	;btemp
  4052  007E                     wtemp0	set	126
  4053                           
  4054                           	psect	intentry
  4055  0004                     __pintentry:	
  4056                           ;incstack = 0
  4057                           ; Regs used in _timer_isr: [wreg]
  4058                           
  4059  0004                     interrupt_function:
  4060  007E                     saved_w	set	btemp
  4061  0004  00FE               	movwf	btemp
  4062  0005  0E03               	swapf	3,w
  4063  0006  00F0               	movwf	??_timer_isr
  4064  0007  080A               	movf	10,w
  4065  0008  00F1               	movwf	??_timer_isr+1
  4066  0009  120A  118A  2F92   	ljmp	_timer_isr
  4067                           
  4068                           	psect	config
  4069                           
  4070                           ;Config register CONFIG @ 0x2007
  4071                           ;	Oscillator Selection bits
  4072                           ;	FOSC = HS, HS oscillator
  4073                           ;	Watchdog Timer Enable bit
  4074                           ;	WDTE = OFF, WDT disabled
  4075                           ;	Power-up Timer Enable bit
  4076                           ;	PWRTE = ON, PWRT enabled
  4077                           ;	Brown-out Reset Enable bit
  4078                           ;	BOREN = ON, BOR enabled
  4079                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4080                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4081                           ;	Data EEPROM Memory Code Protection bit
  4082                           ;	CPD = OFF, Data EEPROM code protection off
  4083                           ;	Flash Program Memory Write Enable bits
  4084                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4085                           ;	In-Circuit Debugger Mode bit
  4086                           ;	DEBUG = 0x1, unprogrammed default
  4087                           ;	Flash Program Memory Code Protection bit
  4088                           ;	CP = OFF, Code protection off
  4089  2007                     	org	8199
  4090  2007  3F72               	dw	16242

Data Sizes:
    Strings     151
    Constant    26
    Data        4
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     24      76
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_4(CODE[12]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> array(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    UART_send_string@st_pt	PTR unsigned char  size(1) Largest target is 27
		 -> STR_12(CODE[3]), STR_11(CODE[23]), STR_10(CODE[27]), STR_9(CODE[15]), 
		 -> STR_8(CODE[7]), STR_7(CODE[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_14(CODE[8]), STR_13(CODE[17]), STR_6(CODE[11]), STR_5(CODE[11]), 
		 -> array(BANK0[20]), STR_3(CODE[7]), STR_2(CODE[13]), STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _send_sms->_UART_send_string
    _UART_send_string->_UART_send_char
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _initializer->_Lcd_Print_Char
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _timer_isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_read_sensor
    _read_sensor->_sprintf
    _sprintf->___lwmod
    _initializer->_Lcd_Print_String

Critical Paths under _timer_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    8418
                                             21 BANK0      3     3      0
                     _ADC_Initialize
                         _Init_timer
                    _Initialize_UART
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                          _Lcd_Start
                              _blink
                        _initializer
                     _operate_buzzer
                        _read_sensor
                           _send_sms
 ---------------------------------------------------------------------------------
 (1) _send_sms                                             0     0      0     287
                     _UART_send_char
                   _UART_send_string
 ---------------------------------------------------------------------------------
 (2) _UART_send_string                                     2     2      0     265
                                              3 COMMON     2     2      0
                     _UART_send_char
 ---------------------------------------------------------------------------------
 (3) _UART_send_char                                       1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                          4     4      0    3265
                                             17 BANK0      4     4      0
                           _ADC_Read
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1211
                                              4 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     311
                                             10 COMMON     2     2      0
                                              0 BANK0      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Read                                             5     3      2      22
                                              2 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (1) _operate_buzzer                                       4     4      0       0
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _initializer                                          5     5      0    2480
                                              7 BANK0      5     5      0
                          _Lcd_Clear
                     _Lcd_Print_Char
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       7     6      1    1064
                                              6 COMMON     3     2      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Print_String                                     7     5      2     968
                                              0 BANK0      7     5      2
                     _Lcd_Print_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Print_Char                                       8     8      0     270
                                              3 COMMON     8     8      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _blink                                                4     4      0       0
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            4     4      0     244
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     110
                                              3 COMMON     3     3      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (4) _Lcd_SetBit                                           1     1      0      88
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Initialize_UART                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_timer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _timer_isr                                            2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Init_timer
   _Initialize_UART
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_SetBit
   _Lcd_Print_String
     _Lcd_Print_Char
       _Lcd_SetBit
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Start
     _Lcd_Cmd
     _Lcd_SetBit
   _blink
   _initializer
     _Lcd_Clear
     _Lcd_Print_Char
     _Lcd_Print_String
     _Lcd_Set_Cursor
   _operate_buzzer
   _read_sensor
     _ADC_Read
     _Lcd_Print_String
     _Lcd_Set_Cursor
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _send_sms
     _UART_send_char
     _UART_send_string
       _UART_send_char

 _timer_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     18      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      12        0.0%
ABS                  0      0      58       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue May 03 11:48:13 2022

              _sms_interval 031E                           pc 0002                          l91 075A  
                        l92 075D                          l93 0763                          l94 0764  
                        l95 076A                          l96 076B                          l97 0771  
                        l99 0772                          fsr 0004                         l102 07C7  
                       l111 0589                         l120 050A                         l105 07E6  
                       l121 051A                         l201 0750                         l122 052E  
                       l210 01F8                         l123 0531                         l132 07D9  
                       l116 05DD                         l205 06E9                         l214 0667  
                       l142 07F4                         l119 04F6                         l223 02BE  
                       l151 0791                         l216 0668                         l129 0623  
                       l145 07FC                         l233 04D2                         l351 011D  
                       l186 07F2                         l195 02C7                         l198 0746  
                       l627 06AC                         l637 0725                         _GIE 005F  
                       _RB0 0030                         _RB1 0031                         _RB2 0032  
                       _RB3 0033                         _RB4 0034                         _RD0 0040  
                       _RB5 0035                         _RD1 0041                         _RD2 0042  
                       _RD3 0043                         _RD4 0044                         u600 0761  
                       u601 0760                         u610 0768                         u611 0767  
                       u620 076F                         u621 076E                         u710 0694  
                       u711 0693                         u640 050A                         u800 053A  
                       u641 0509                         u801 0539                         u705 0684  
                       u650 052E                         u730 06A8                         u651 052D  
                       u635 04E4                         u731 06A7                         u715 0690  
                       u820 0565                         u740 06F2                         u900 0042  
                       u660 07FA                         u645 0506                         u821 0564  
                       u725 069C                         u741 06F1                         u901 0041  
                       u661 07F9                         u590 0756                         u670 0671  
                       u910 007C                         u591 0755                         u655 052A  
                       u815 0542                         u671 0670                         u911 007B  
                       u840 05ED                         u760 0704                         u920 00A2  
                       u761 0703                         u921 00A1                         u850 0611  
                       u690 0683                         u770 070E                         u930 00AD  
                       u835 056D                         u691 0682                         u771 070D  
                       u755 06F6                         u931 00AC                         u860 0623  
                       u940 00B3                         u861 0622                         u685 0675  
                       u941 00B2                         u925 009E                         u790 0721  
                       u950 0107                         u870 0791                         u791 0720  
                       u775 070A                         u951 0106                         u871 0790  
                       u960 0119                         u785 0715                         u961 0118  
                       _RX9 00C6                         u890 074A                         u971 06BE  
                       u891 0749                         u980 06DD                         u972 06BF  
                       u981 06DC                         u973 06C4                         u885 0730  
                       u974 06C5                         u990 0180                         u983 06D9  
                       u975 06CA                         u991 017F                         u976 06CB  
                       _TX9 04C6                         u995 017C                         fsr0 0004  
                       indf 0000                        l1111 07D5                        l1121 02BF  
                      l1113 07E7                        l1115 07EF                        l1117 07F0  
                      l1109 07C8                        l1119 07F1                        l1401 0669  
                      l1411 067F                        l1403 066B                        l1421 06A2  
                      l1413 0683                        l1405 0671                        l1501 0042  
                      l1351 0768                        l1415 0694                        l1407 0674  
                      l1423 06A8                        l1431 06F5                        l1511 006C  
                      l1503 0049                        l1353 076F                        l1345 0752  
                      l1361 07BB                        l1601 0136                        l1417 069A  
                      l1409 067B                        l1441 0714                        l1433 06FC  
                      l1521 0085                        l1513 0074                        l1505 004E  
                      l1347 0756                        l1363 07C4                        l1355 07AF  
                      l1371 04EF                        l1451 0535                        l1611 0156  
                      l1603 0144                        l1419 069B                        l1443 071B  
                      l1435 0700                        l1427 06EA                        l1531 00A3  
                      l1515 0078                        l1349 0761                        l1357 07B2  
                      l1381 04FD                        l1373 04F2                        l1365 04D4  
                      l1453 053A                        l1461 055F                        l1621 018D  
                      l1613 015C                        l1437 0704                        l1429 06F2  
                      l1445 0721                        l1541 00C3                        l1533 00AD  
                      l1517 007C                        l1509 004F                        l1701 0458  
                      l1359 07B8                        l1383 050D                        l1367 04DE  
                      l1471 05DE                        l1463 0565                        l1455 054B  
                      l1631 01C0                        l1623 0198                        l1615 016B  
                      l1439 070E                        l1543 00F3                        l1535 00B3  
                      l1527 0087                        l1519 0080                        l1551 0119  
                      l1711 048C                        l1703 0460                        l1561 0590  
                      l1449 07DA                        l1393 051B                        l1385 0513  
                      l1369 04E1                        l1473 05E3                        l1465 0576  
                      l1457 0550                        l1641 01F3                        l1633 01CF  
                      l1625 01AB                        l1617 0173                        l1609 014A  
                      l1545 00FA                        l1537 00BA                        l1481 0775  
                      l1721 04B3                        l1713 0495                        l1705 0472  
                      l1571 0590                        l1563 0590                        l1395 0521  
                      l1387 0516                        l1379 04F7                        l1475 05FF  
                      l1467 057B                        l1459 0556                        l1635 01D2  
                      l1627 01AE                        l1619 0180                        l1643 0624  
                      l1491 0743                        l1547 00FE                        l1539 00BE  
                      l1651 01F9                        l1483 0781                        l1723 04B9  
                      l1715 049B                        l1707 047A                        l1581 05B9  
                      l1573 0596                        l1477 0607                        l1469 0581  
                      l1637 01E1                        l1629 01BD                        l1645 0654  
                      l1493 074A                        l1549 0107                        l1661 023D  
                      l1653 0205                        l1397 07F4                        l1485 0785  
                      l1725 04BF                        l1717 04A4                        l1709 0480  
                      l1741 03D3                        l1591 05D7                        l1583 05BF  
                      l1575 059F                        l1559 058A                        l1639 01E4  
                      l1647 065E                        l1487 0727                        l1807 0061  
                      l1671 0251                        l1663 0248                        l1655 0213  
                      l1399 07FA                        l1479 0774                        l1727 04C5  
                      l1719 04AA                        l1751 03DE                        l1743 03D6  
                      l1585 05C5                        l1577 05AD                        l1593 06AD  
                      l1649 0664                        l1489 073A                        l1497 0037  
                      l1681 028D                        l1673 0257                        l1665 024E  
                      l1657 0226                        l1729 04CE                        l1761 0411  
                      l1753 03DF                        l1745 03D9                        l1737 03C1  
                      l1587 05CB                        l1579 05B3                        l1595 06DD  
                      l1499 003C                        l1691 02B5                        l1675 0259  
                      l1667 024F                        l1659 0235                        l1683 029C  
                      l1771 0426                        l1763 0414                        l1755 03E0  
                      l1747 03DC                        l1739 03D0                        l1589 05D1  
                      l1597 011E                        l1693 02B7                        l1685 02A4  
                      l1677 025D                        l1669 0250                        l1781 0440  
                      l1773 0429                        l1765 0415                        l1757 03F3  
                      l1749 03DD                        l1599 012B                        l1695 02B8  
                      l1687 02AF                        l1679 025F                        l1783 0445  
                      l1775 042A                        l1767 0416                        l1759 03FE  
                      l1697 02B9                        l1689 02B3                        l1785 044F  
                      l1777 042B                        l1769 0417                        l1699 02BA  
                      l1779 042C                        STR_1 037C                        STR_2 037C  
                      STR_3 03BA                        STR_4 0389                        STR_5 03A0  
                      STR_6 0395                        STR_7 0342                        STR_8 03B3  
                      STR_9 036D                        _BRGH 04C2                        _CREN 00C4  
                      u1001 0635                        u1010 0654                        u1002 0636  
                      u1011 0653                        u1003 063B                        u1020 0664  
                      u1004 063C                        u1100 0495                        u1021 0663  
                      u1013 0650                        u1005 0641                        u1101 0494  
                      u1006 0642                        u1030 0235                        u1110 04A4  
                      u1031 0234                        u1111 04A3                        u1040 0257  
                      u1120 04B3                        u1041 0256                        u1121 04B2  
                      u1130 04CE                        u1051 026E                        u1035 0231  
                      u1131 04CD                        u1060 028D                        u1052 026F  
                      u1061 028C                        u1053 0274                        u1054 0275  
                      u1070 0460                        u1207 01B6                        u1063 0289  
                      u1055 027A                        u1071 045F                        u1056 027B  
                      u1080 0472                        u1217 01C8                        u1081 0471  
                      u1090 0480                        u1227 01DA                        u1091 047F  
                      u1083 046E                        u1237 01EC                        u1157 041F  
                      u1247 059A                        u1167 0434                        u1257 05A9  
                      u1177 073E                        u1267 07BF                        u1187 013E  
                      u1197 0164                        _PEIE 005E                        _RCIF 0065  
                      _OERR 00C1                        _TMR0 0001                        _SPEN 00C7  
                      _TXEN 04C5                        _TXIF 0064                        _SYNC 04C4  
                      _main 03C1                        btemp 007E            __end_of_ADC_Read 0751  
                      start 000C          Lcd_Print_Char@i_99 0079          Lcd_Print_Char@data 0076  
           __end_of_Lcd_Cmd 07C8        __end_of_del_interval 031E   __size_of_UART_send_string 001F  
                _Lcd_SetBit 0751                       ?_main 0070                       STR_10 032A  
                     STR_11 0345                       STR_12 0342                       STR_13 035C  
                     STR_14 03AB             __end_of___lwdiv 06AD                       i1l192 07A7  
        _sms_previousMillis 0024             __end_of___lwmod 0726                       _RCREG 001A  
                     _SPBRG 0099                       _PORTB 0006                       _PORTD 0008  
   __size_of_Lcd_Set_Cursor 0058                       _TRISB 0086                       _TRISD 0088  
                     _TXREG 0019                ?_initializer 0070                       _del_c 0034  
                     _blink 06AD                       _f_sms 0068             __end_of_dpowers 031A  
                     _array 003C                ?_read_sensor 0070                       pclath 000A  
 __size_of_Lcd_Print_String 0046                       status 0003                       wtemp0 007E  
           __end_of_sprintf 011E     __size_of_Lcd_Print_Char 005F          _del_previousMillis 0020  
           __initialization 000F                __end_of_main 0458                  _Init_timer 07E7  
                    ??_main 0065          __size_of_Lcd_Clear 000D          __size_of_Lcd_Start 0054  
                    ?_blink 0070                      _ADCON0 001F                      _ADCON1 009F  
                    _ADRESH 001E                      _ADRESL 009E                      i1l1731 0792  
                    i1l1733 0796                      i1l1735 0797                      u114_20 0796  
                    u114_21 0795                   ??_Lcd_Cmd 0073                      _TMR0IE 005D  
                    _TMR0IF 005A                      _TRISC6 043E                      _TRISC7 043F  
                 ??___lwdiv 0076                   ??___lwmod 007A             ADC_Read@channel 0076  
               ?_Lcd_SetBit 0070            __end_of_send_sms 04D3       _buzzer_previousMillis 0028  
                 ?_ADC_Read 0072                      saved_w 007E     __size_of_operate_buzzer 0045  
                 ??_sprintf 0057             Lcd_Set_Cursor@a 0050             Lcd_Set_Cursor@b 0076  
           Lcd_Set_Cursor@y 0052             Lcd_Set_Cursor@z 0051     __end_of__initialization 0030  
         __end_of_Lcd_Clear 07E7           __end_of_Lcd_Start 05DE              __pcstackCOMMON 0070  
              __pidataBANK0 02D0               __end_of_blink 06EA            _UART_send_string 0773  
  __size_of_Initialize_UART 0012                 ?_Init_timer 0070              _Lcd_Set_Cursor 0532  
                ??_ADC_Read 0074                _del_interval 031A               _currentMillis 0030  
                   ??_blink 0072        __size_of_initializer 00DB                  __pbssBANK0 0020  
      __size_of_read_sensor 00C6            _Lcd_Print_String 05DE         __size_of_Lcd_SetBit 0022  
            _Lcd_Print_Char 04D3                  _mq2_thresh 006A                  __pmaintext 03C1  
                __pintentry 0004          Lcd_SetBit@data_bit 0072      __end_of_Lcd_Set_Cursor 058A  
   __size_of_ADC_Initialize 0009          __size_of_timer_isr 001C     __size_of_UART_send_char 000A  
                __stringtab 0300             Lcd_Print_Char@i 0077         __size_of_Init_timer 000C  
                   _Lcd_Cmd 07AE      __end_of_Lcd_Print_Char 0532                   ?_send_sms 0070  
                   ___lwdiv 0669                     ___lwmod 06EA             ?_Lcd_Set_Cursor 0076  
                   __ptext1 0458                     __ptext2 0773                     __ptext3 07F3  
                   __ptext4 01F9                     __ptext5 0034                     __ptext6 06EA  
                   __ptext7 0669                     __ptext8 0726                     __ptext9 0624  
                   _dpowers 0310           ??_Initialize_UART 0072              _operate_buzzer 0624  
                   _sprintf 0034                     clrloop0 02C9        end_of_initialization 0030  
           ?_Lcd_Print_Char 0070           __end_of_timer_isr 07AE                  ??_send_sms 0075  
              initializer@i 005A                ??_Lcd_SetBit 0072      __end_of_operate_buzzer 0669  
            _blink_interval 0326           __size_of_ADC_Read 002B    __end_of_UART_send_string 0792  
        __end_of_Lcd_SetBit 0773                   _Lcd_Clear 07DA                   _Lcd_Start 058A  
              ??_Init_timer 0072              _ADC_Initialize 02BF    __end_of_Lcd_Print_String 0624  
    __end_of_blink_interval 032A             ?_operate_buzzer 0070         start_initialization 000F  
            _UART_send_char 07F3        _blink_previousMillis 002C          __end_of_Init_timer 07F3  
         Lcd_Print_String@a 0050           Lcd_Print_String@i 0055                  ?_Lcd_Clear 0070  
                ?_Lcd_Start 0070      __end_of_ADC_Initialize 02C8                 __pdataBANK0 0068  
Lcd_Print_Char@Lower_Nibble 0074      __end_of_UART_send_char 07FD                   ___latbits 0002  
             ??_initializer 0057               __pcstackBANK0 0050               ??_read_sensor 0061  
                  ?_Lcd_Cmd 0070                 sprintf@flag 005B                 _analog_read 003A  
               sprintf@prec 005C            ___lwdiv@dividend 0074            ??_Lcd_Set_Cursor 0077  
           _Initialize_UART 07C8           __size_of_send_sms 007B                    ?___lwdiv 0072  
                  ?___lwmod 0050             ?_ADC_Initialize 0070            UART_send_char@bt 0072  
                 __pstrings 0300             ?_UART_send_char 0070                    _ADC_Read 0726  
          ??_Lcd_Print_Char 0073            ___lwdiv@quotient 0077              __size_of_blink 003D  
                  ?_sprintf 0054         __end_of_initializer 01F9           interrupt_function 0004  
       __end_of_read_sensor 02BF                _buzzer_state 0038                   clear_ram0 02C8  
                  Lcd_Cmd@a 0075                    _GO_nDONE 00FA                 ??_Lcd_Clear 0076  
               ??_Lcd_Start 0076                   _timer_isr 0792                   _sms_state 0036  
               __stringbase 030F       UART_send_string@st_pt 0074        __end_of_sms_interval 0322  
           _buzzer_interval 0322           ?_UART_send_string 0070          ??_UART_send_string 0073  
   __end_of_Initialize_UART 07DA            __size_of_Lcd_Cmd 001A                  ?_timer_isr 0070  
          ??_operate_buzzer 0072            __size_of___lwdiv 0044            __size_of___lwmod 003C  
        __end_of__stringtab 0310           ?_Lcd_Print_String 0050                  sprintf@val 005D  
        ??_Lcd_Print_String 0052             ___lwdiv@divisor 0072                 _initializer 011E  
           ___lwdiv@counter 0079                    __ptext10 011E                    __ptext11 0532  
                  __ptext20 07E7                    __ptext12 05DE                    __ptext21 02BF  
                  __ptext13 04D3                    __ptext22 0792                    __ptext14 07DA  
                  __ptext15 06AD                    __ptext16 058A                    __ptext17 07AE  
                  __ptext18 0751                    __ptext19 07C8                 _read_sensor 01F9  
          __size_of_sprintf 00EA               __size_of_main 0097                    _send_sms 0458  
Lcd_Print_Char@Upper_Nibble 0075     __end_of_buzzer_interval 0326                    intlevel1 0000  
                 sprintf@ap 005A                   sprintf@sp 005F            ___lwmod@dividend 0052  
          ?_Initialize_UART 0070            ??_ADC_Initialize 0072                   stringcode 030A  
               ??_timer_isr 0070            ??_UART_send_char 0072          Lcd_Set_Cursor@temp 0053  
                _OPTION_REG 0081                    sprintf@c 0060                    sprintf@f 0054  
           ___lwmod@divisor 0050             ___lwmod@counter 007B                    stringdir 030A  
                  stringtab 0300  
